
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.19+36 (git sha1 30a4218f5, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `verilog_defines  -DNO_ICE40_DEFAULT_ASSIGNMENTS ; read_verilog -Irtl -sv rtl/adder.sv rtl/alu.sv rtl/arm.sv rtl/condlogic.sv rtl/controller.sv rtl/datapath.sv rtl/decoder.sv rtl/dmem.sv rtl/extend.sv rtl/flopenr.sv rtl/flopr.sv rtl/imem.sv rtl/mux2.sv rtl/regfile.sv rtl/top.sv ; synth_ice40 -device u -abc9 -noflatten' --

1. Executing Verilog-2005 frontend: rtl/adder.sv
Parsing SystemVerilog input from `rtl/adder.sv' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: rtl/alu.sv
Parsing SystemVerilog input from `rtl/alu.sv' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: rtl/arm.sv
Parsing SystemVerilog input from `rtl/arm.sv' to AST representation.
Generating RTLIL representation for module `\arm'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: rtl/condlogic.sv
Parsing SystemVerilog input from `rtl/condlogic.sv' to AST representation.
Generating RTLIL representation for module `\condlogic'.
Generating RTLIL representation for module `\condcheck'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: rtl/controller.sv
Parsing SystemVerilog input from `rtl/controller.sv' to AST representation.
Generating RTLIL representation for module `\controller'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: rtl/datapath.sv
Parsing SystemVerilog input from `rtl/datapath.sv' to AST representation.
Generating RTLIL representation for module `\datapath'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: rtl/decoder.sv
Parsing SystemVerilog input from `rtl/decoder.sv' to AST representation.
Generating RTLIL representation for module `\decoder'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: rtl/dmem.sv
Parsing SystemVerilog input from `rtl/dmem.sv' to AST representation.
Generating RTLIL representation for module `\dmem'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: rtl/extend.sv
Parsing SystemVerilog input from `rtl/extend.sv' to AST representation.
Generating RTLIL representation for module `\extend'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: rtl/flopenr.sv
Parsing SystemVerilog input from `rtl/flopenr.sv' to AST representation.
Generating RTLIL representation for module `\flopenr'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: rtl/flopr.sv
Parsing SystemVerilog input from `rtl/flopr.sv' to AST representation.
Generating RTLIL representation for module `\flopr'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: rtl/imem.sv
Parsing SystemVerilog input from `rtl/imem.sv' to AST representation.
Generating RTLIL representation for module `\imem'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: rtl/mux2.sv
Parsing SystemVerilog input from `rtl/mux2.sv' to AST representation.
Generating RTLIL representation for module `\mux2'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: rtl/regfile.sv
Parsing SystemVerilog input from `rtl/regfile.sv' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: rtl/top.sv
Parsing SystemVerilog input from `rtl/top.sv' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

16. Executing SYNTH_ICE40 pass.

16.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

16.2. Executing HIERARCHY pass (managing design hierarchy).

16.2.1. Finding top of design hierarchy..
root of   4 design levels: top                 
root of   0 design levels: regfile             
root of   0 design levels: mux2                
root of   0 design levels: imem                
root of   0 design levels: flopr               
root of   0 design levels: flopenr             
root of   0 design levels: extend              
root of   0 design levels: dmem                
root of   0 design levels: decoder             
root of   1 design levels: datapath            
root of   2 design levels: controller          
root of   0 design levels: condcheck           
root of   1 design levels: condlogic           
root of   3 design levels: arm                 
root of   0 design levels: alu                 
root of   0 design levels: adder               
Automatically selected top as design top module.

16.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \dmem
Used module:     \imem
Used module:     \arm
Used module:         \datapath
Used module:             \alu
Used module:             \mux2
Used module:             \extend
Used module:             \regfile
Used module:             \adder
Used module:             \flopr
Used module:         \controller
Used module:             \condlogic
Used module:                 \condcheck
Used module:                 \flopenr
Used module:             \decoder
Parameter 1 (\WIDTH) = 32

16.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2'.
Parameter 1 (\WIDTH) = 32
Generating RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 32
Found cached RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 4

16.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2'.
Parameter 1 (\WIDTH) = 4
Generating RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 32

16.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Parameter 1 (\WIDTH) = 32
Generating RTLIL representation for module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 32
Found cached RTLIL representation for module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 32

16.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\flopr'.
Parameter 1 (\WIDTH) = 32
Generating RTLIL representation for module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 32
Found cached RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Parameter 1 (\WIDTH) = 2

16.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\flopenr'.
Parameter 1 (\WIDTH) = 2
Generating RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Parameter 1 (\WIDTH) = 2
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.

16.2.8. Analyzing design hierarchy..
Top module:  \top
Used module:     \dmem
Used module:     \imem
Used module:     \arm
Used module:         \datapath
Used module:             \alu
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000100000
Used module:             \extend
Used module:             \regfile
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:             $paramod\adder\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\flopr\WIDTH=s32'00000000000000000000000000100000
Used module:         \controller
Used module:             \condlogic
Used module:                 \condcheck
Used module:                 $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:             \decoder

16.2.9. Analyzing design hierarchy..
Top module:  \top
Used module:     \dmem
Used module:     \imem
Used module:     \arm
Used module:         \datapath
Used module:             \alu
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000100000
Used module:             \extend
Used module:             \regfile
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:             $paramod\adder\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\flopr\WIDTH=s32'00000000000000000000000000100000
Used module:         \controller
Used module:             \condlogic
Used module:                 \condcheck
Used module:                 $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:             \decoder
Removing unused module `\mux2'.
Removing unused module `\flopr'.
Removing unused module `\flopenr'.
Removing unused module `\adder'.
Removed 4 unused modules.
Mapping positional arguments of cell top.dmem (dmem).
Mapping positional arguments of cell top.imem (imem).
Mapping positional arguments of cell top.arm (arm).
Mapping positional arguments of cell datapath.alu (alu).
Mapping positional arguments of cell datapath.srcbmux ($paramod\mux2\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell datapath.ext (extend).
Mapping positional arguments of cell datapath.resmux ($paramod\mux2\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell datapath.rf (regfile).
Mapping positional arguments of cell datapath.ra2mux ($paramod\mux2\WIDTH=s32'00000000000000000000000000000100).
Mapping positional arguments of cell datapath.ra1mux ($paramod\mux2\WIDTH=s32'00000000000000000000000000000100).
Mapping positional arguments of cell datapath.pcadd2 ($paramod\adder\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell datapath.pcadd1 ($paramod\adder\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell datapath.pcreg ($paramod\flopr\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell datapath.pcmux ($paramod\mux2\WIDTH=s32'00000000000000000000000000100000).
Mapping positional arguments of cell controller.cl (condlogic).
Mapping positional arguments of cell controller.dec (decoder).
Mapping positional arguments of cell condlogic.cc (condcheck).
Mapping positional arguments of cell condlogic.flagreg0 ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000010).
Mapping positional arguments of cell condlogic.flagreg1 ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000010).
Mapping positional arguments of cell arm.dp (datapath).
Mapping positional arguments of cell arm.c (controller).

16.3. Executing PROC pass (convert processes to netlists).

16.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `imem.$proc$rtl/imem.sv:0$62'.
Cleaned up 0 empty switches.

16.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1328$312 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1193$303 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1122$300 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1072$297 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1001$294 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:951$291 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:731$278 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:596$269 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:525$266 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:475$263 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:404$260 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:354$257 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$rtl/regfile.sv:14$65 in module regfile.
Marked 1 switch rules as full_case in process $proc$rtl/flopenr.sv:5$461 in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$rtl/flopr.sv:5$460 in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Marked 1 switch rules as full_case in process $proc$rtl/extend.sv:0$57 in module extend.
Marked 1 switch rules as full_case in process $proc$rtl/dmem.sv:9$50 in module dmem.
Marked 2 switch rules as full_case in process $proc$rtl/decoder.sv:0$40 in module decoder.
Marked 3 switch rules as full_case in process $proc$rtl/decoder.sv:0$39 in module decoder.
Marked 1 switch rules as full_case in process $proc$rtl/condlogic.sv:0$23 in module condcheck.
Removed 1 dead cases from process $proc$rtl/alu.sv:0$15 in module alu.
Marked 1 switch rules as full_case in process $proc$rtl/alu.sv:0$15 in module alu.
Removed a total of 1 dead cases.

16.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 9 redundant assignments.
Promoted 34 assignments to connections.

16.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$320'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$316'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$311'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$307'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$302'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$299'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$296'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$293'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$290'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$288'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$286'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$282'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$277'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$273'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$268'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$265'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$262'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$259'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$256'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$254'.
  Set init value: \Q = 1'0

16.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317'.
Found async reset \R in `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308'.
Found async reset \S in `\SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1122$300'.
Found async reset \R in `\SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1001$294'.
Found async reset \S in `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283'.
Found async reset \R in `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274'.
Found async reset \S in `\SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:525$266'.
Found async reset \R in `\SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:404$260'.
Found async reset \reset in `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/flopenr.sv:5$461'.
Found async reset \reset in `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000.$proc$rtl/flopr.sv:5$460'.

16.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~29 debug messages>

16.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$320'.
Creating decoders for process `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$316'.
Creating decoders for process `\SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1328$312'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$311'.
Creating decoders for process `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$307'.
Creating decoders for process `\SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1193$303'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$302'.
Creating decoders for process `\SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1122$300'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$299'.
Creating decoders for process `\SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1072$297'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$296'.
Creating decoders for process `\SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1001$294'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$293'.
Creating decoders for process `\SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:951$291'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$290'.
Creating decoders for process `\SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:906$289'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$288'.
Creating decoders for process `\SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:868$287'.
Creating decoders for process `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$286'.
Creating decoders for process `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$282'.
Creating decoders for process `\SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:731$278'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$277'.
Creating decoders for process `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$273'.
Creating decoders for process `\SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:596$269'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$268'.
Creating decoders for process `\SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:525$266'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$265'.
Creating decoders for process `\SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:475$263'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$262'.
Creating decoders for process `\SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:404$260'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$259'.
Creating decoders for process `\SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:354$257'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$256'.
Creating decoders for process `\SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:309$255'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$254'.
Creating decoders for process `\SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$253'.
Creating decoders for process `\regfile.$proc$rtl/regfile.sv:14$65'.
     1/3: $1$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$71
     2/3: $1$memwr$\rf$rtl/regfile.sv:15$64_DATA[31:0]$70
     3/3: $1$memwr$\rf$rtl/regfile.sv:15$64_ADDR[3:0]$69
Creating decoders for process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/flopenr.sv:5$461'.
     1/1: $0\q[1:0]
Creating decoders for process `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000.$proc$rtl/flopr.sv:5$460'.
     1/1: $0\q[31:0]
Creating decoders for process `\extend.$proc$rtl/extend.sv:0$57'.
     1/1: $1\ExtImm[31:0]
Creating decoders for process `\dmem.$proc$rtl/dmem.sv:9$50'.
     1/3: $1$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$56
     2/3: $1$memwr$\RAM$rtl/dmem.sv:10$48_DATA[31:0]$55
     3/3: $1$memwr$\RAM$rtl/dmem.sv:10$48_ADDR[29:0]$54
Creating decoders for process `\decoder.$proc$rtl/decoder.sv:0$40'.
     1/4: $1\FlagW[1:0] [1]
     2/4: $2\ALUControl[1:0]
     3/4: $1\FlagW[1:0] [0]
     4/4: $1\ALUControl[1:0]
Creating decoders for process `\decoder.$proc$rtl/decoder.sv:0$39'.
     1/3: $3\controls[9:0]
     2/3: $2\controls[9:0]
     3/3: $1\controls[9:0]
Creating decoders for process `\condcheck.$proc$rtl/condlogic.sv:0$23'.
     1/1: $1\CondEx[0:0]
Creating decoders for process `\alu.$proc$rtl/alu.sv:0$15'.
     1/1: $1\ALUResult[31:0]

16.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\extend.\ExtImm' from process `\extend.$proc$rtl/extend.sv:0$57'.
No latch inferred for signal `\decoder.\ALUControl' from process `\decoder.$proc$rtl/decoder.sv:0$40'.
No latch inferred for signal `\decoder.\FlagW' from process `\decoder.$proc$rtl/decoder.sv:0$40'.
No latch inferred for signal `\decoder.\controls' from process `\decoder.$proc$rtl/decoder.sv:0$39'.
No latch inferred for signal `\condcheck.\CondEx' from process `\condcheck.$proc$rtl/condlogic.sv:0$23'.
No latch inferred for signal `\alu.\ALUResult' from process `\alu.$proc$rtl/alu.sv:0$15'.

16.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317'.
  created $adff cell `$procdff$590' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1328$312'.
  created $dff cell `$procdff$591' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308'.
  created $adff cell `$procdff$592' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1193$303'.
  created $dff cell `$procdff$593' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1122$300'.
  created $adff cell `$procdff$594' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1072$297'.
  created $dff cell `$procdff$595' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1001$294'.
  created $adff cell `$procdff$596' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:951$291'.
  created $dff cell `$procdff$597' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:906$289'.
  created $dff cell `$procdff$598' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:868$287'.
  created $dff cell `$procdff$599' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283'.
  created $adff cell `$procdff$600' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:731$278'.
  created $dff cell `$procdff$601' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274'.
  created $adff cell `$procdff$602' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:596$269'.
  created $dff cell `$procdff$603' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:525$266'.
  created $adff cell `$procdff$604' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:475$263'.
  created $dff cell `$procdff$605' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:404$260'.
  created $adff cell `$procdff$606' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:354$257'.
  created $dff cell `$procdff$607' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:309$255'.
  created $dff cell `$procdff$608' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$253'.
  created $dff cell `$procdff$609' with positive edge clock.
Creating register for signal `\regfile.$memwr$\rf$rtl/regfile.sv:15$64_ADDR' using process `\regfile.$proc$rtl/regfile.sv:14$65'.
  created $dff cell `$procdff$610' with positive edge clock.
Creating register for signal `\regfile.$memwr$\rf$rtl/regfile.sv:15$64_DATA' using process `\regfile.$proc$rtl/regfile.sv:14$65'.
  created $dff cell `$procdff$611' with positive edge clock.
Creating register for signal `\regfile.$memwr$\rf$rtl/regfile.sv:15$64_EN' using process `\regfile.$proc$rtl/regfile.sv:14$65'.
  created $dff cell `$procdff$612' with positive edge clock.
Creating register for signal `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.\q' using process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/flopenr.sv:5$461'.
  created $adff cell `$procdff$613' with positive edge clock and positive level reset.
Creating register for signal `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000.\q' using process `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000.$proc$rtl/flopr.sv:5$460'.
  created $adff cell `$procdff$614' with positive edge clock and positive level reset.
Creating register for signal `\dmem.$memwr$\RAM$rtl/dmem.sv:10$48_ADDR' using process `\dmem.$proc$rtl/dmem.sv:9$50'.
  created $dff cell `$procdff$615' with positive edge clock.
Creating register for signal `\dmem.$memwr$\RAM$rtl/dmem.sv:10$48_DATA' using process `\dmem.$proc$rtl/dmem.sv:9$50'.
  created $dff cell `$procdff$616' with positive edge clock.
Creating register for signal `\dmem.$memwr$\RAM$rtl/dmem.sv:10$48_EN' using process `\dmem.$proc$rtl/dmem.sv:9$50'.
  created $dff cell `$procdff$617' with positive edge clock.

16.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

16.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$320'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317'.
Removing empty process `SB_DFFNES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1386$317'.
Removing empty process `SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$316'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1328$312'.
Removing empty process `SB_DFFNESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1328$312'.
Removing empty process `SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$311'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308'.
Removing empty process `SB_DFFNER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1251$308'.
Removing empty process `SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$307'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1193$303'.
Removing empty process `SB_DFFNESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1193$303'.
Removing empty process `SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$302'.
Removing empty process `SB_DFFNS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1122$300'.
Removing empty process `SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$299'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1072$297'.
Removing empty process `SB_DFFNSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1072$297'.
Removing empty process `SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$296'.
Removing empty process `SB_DFFNR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:1001$294'.
Removing empty process `SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$293'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:951$291'.
Removing empty process `SB_DFFNSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:951$291'.
Removing empty process `SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$290'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:906$289'.
Removing empty process `SB_DFFNE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:906$289'.
Removing empty process `SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$288'.
Removing empty process `SB_DFFN.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:868$287'.
Removing empty process `SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$286'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283'.
Removing empty process `SB_DFFES.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:789$283'.
Removing empty process `SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$282'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:731$278'.
Removing empty process `SB_DFFESS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:731$278'.
Removing empty process `SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$277'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274'.
Removing empty process `SB_DFFER.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:654$274'.
Removing empty process `SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$273'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:596$269'.
Removing empty process `SB_DFFESR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:596$269'.
Removing empty process `SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$268'.
Removing empty process `SB_DFFS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:525$266'.
Removing empty process `SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$265'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:475$263'.
Removing empty process `SB_DFFSS.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:475$263'.
Removing empty process `SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$262'.
Removing empty process `SB_DFFR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:404$260'.
Removing empty process `SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$259'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:354$257'.
Removing empty process `SB_DFFSR.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:354$257'.
Removing empty process `SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$256'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:309$255'.
Removing empty process `SB_DFFE.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:309$255'.
Removing empty process `SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:0$254'.
Removing empty process `SB_DFF.$proc$/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_sim.v:271$253'.
Found and cleaned up 1 empty switch in `\regfile.$proc$rtl/regfile.sv:14$65'.
Removing empty process `regfile.$proc$rtl/regfile.sv:14$65'.
Found and cleaned up 1 empty switch in `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/flopenr.sv:5$461'.
Removing empty process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/flopenr.sv:5$461'.
Removing empty process `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000.$proc$rtl/flopr.sv:5$460'.
Found and cleaned up 1 empty switch in `\extend.$proc$rtl/extend.sv:0$57'.
Removing empty process `extend.$proc$rtl/extend.sv:0$57'.
Found and cleaned up 1 empty switch in `\dmem.$proc$rtl/dmem.sv:9$50'.
Removing empty process `dmem.$proc$rtl/dmem.sv:9$50'.
Found and cleaned up 2 empty switches in `\decoder.$proc$rtl/decoder.sv:0$40'.
Removing empty process `decoder.$proc$rtl/decoder.sv:0$40'.
Found and cleaned up 3 empty switches in `\decoder.$proc$rtl/decoder.sv:0$39'.
Removing empty process `decoder.$proc$rtl/decoder.sv:0$39'.
Found and cleaned up 1 empty switch in `\condcheck.$proc$rtl/condlogic.sv:0$23'.
Removing empty process `condcheck.$proc$rtl/condlogic.sv:0$23'.
Found and cleaned up 1 empty switch in `\alu.$proc$rtl/alu.sv:0$15'.
Removing empty process `alu.$proc$rtl/alu.sv:0$15'.
Cleaned up 29 empty switches.

16.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module top.
Optimizing module regfile.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module imem.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module extend.
<suppressed ~1 debug messages>
Optimizing module dmem.
Optimizing module decoder.
<suppressed ~4 debug messages>
Optimizing module datapath.
Optimizing module controller.
Optimizing module condcheck.
<suppressed ~1 debug messages>
Optimizing module condlogic.
Optimizing module arm.
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.

16.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module top.
Optimizing module regfile.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module imem.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module extend.
Optimizing module dmem.
Optimizing module decoder.
Optimizing module datapath.
Optimizing module controller.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module arm.
Optimizing module alu.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.

16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Removed 13 unused cells and 79 unused wires.
<suppressed ~27 debug messages>

16.6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\adder\WIDTH=s32'00000000000000000000000000100000...
Checking module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000...
Checking module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100...
Checking module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000...
Checking module alu...
Checking module arm...
Checking module condcheck...
Checking module condlogic...
Checking module controller...
Checking module datapath...
Checking module decoder...
Checking module dmem...
Checking module extend...
Checking module imem...
Checking module regfile...
Checking module top...
Found and reported 0 problems.

16.7. Executing OPT pass (performing simple optimizations).

16.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
<suppressed ~18 debug messages>
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
<suppressed ~6 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 8 cells.

16.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$554.
    dead port 2/2 on $mux $procmux$562.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 2 multiplexer ports.
<suppressed ~21 debug messages>

16.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
    Consolidated identical input bits for $mux cell $procmux$523:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53
      New ports: A=1'0, B=1'1, Y=$0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0]
      New connections: $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [31:1] = { $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] $0$memwr$\RAM$rtl/dmem.sv:10$48_EN[31:0]$53 [0] }
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$507:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68
      New ports: A=1'0, B=1'1, Y=$0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0]
      New connections: $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [31:1] = { $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] $0$memwr$\rf$rtl/regfile.sv:15$64_EN[31:0]$68 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 2 changes.

16.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.7.6. Executing OPT_DFF pass (perform DFF optimizations).

16.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

16.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.7.9. Rerunning OPT passes. (Maybe there is more to do..)

16.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

16.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.7.13. Executing OPT_DFF pass (perform DFF optimizations).

16.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.7.16. Finished OPT passes. (There is nothing left to do.)

16.8. Executing FSM pass (extract and optimize FSM).

16.8.1. Executing FSM_DETECT pass (finding FSMs in design).

16.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

16.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

16.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

16.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

16.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

16.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

16.9. Executing OPT pass (performing simple optimizations).

16.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

16.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$613 ($adff) from module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010 (D = \d, Q = \q).

16.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

16.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.9.9. Rerunning OPT passes. (Maybe there is more to do..)

16.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

16.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.9.13. Executing OPT_DFF pass (perform DFF optimizations).

16.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.9.16. Finished OPT passes. (There is nothing left to do.)

16.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell condcheck.$procmux$578_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell condcheck.$procmux$579_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell condcheck.$procmux$580_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell condcheck.$procmux$581_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell condcheck.$procmux$582_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell condcheck.$procmux$583_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell condcheck.$procmux$584_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell decoder.$eq$rtl/decoder.sv:45$42 ($eq).
Removed top 2 bits (of 4) from port B of cell decoder.$procmux$539_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell decoder.$procmux$540_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell decoder.$procmux$555_CMP0 ($eq).
Removed top 4 bits (of 10) from mux cell decoder.$procmux$560 ($mux).
Removed top 4 bits (of 10) from wire decoder.$2\controls[9:0].
Removed top 24 address bits (of 30) from memory init port dmem.$auto$proc_memwr.cc:45:proc_memwr$619 (RAM).
Removed top 24 address bits (of 30) from memory read port dmem.$memrd$\RAM$rtl/dmem.sv:7$49 (RAM).
Removed top 24 bits (of 30) from mux cell dmem.$procmux$529 ($mux).
Removed top 24 bits (of 30) from wire dmem.$0$memwr$\RAM$rtl/dmem.sv:10$48_ADDR[29:0]$51.
Removed top 1 bits (of 2) from port B of cell extend.$procmux$520_CMP0 ($eq).
Removed top 26 address bits (of 32) from memory init port imem.$meminit$\RAM$rtl/imem.sv:0$61 (RAM).
Removed top 24 address bits (of 30) from memory read port imem.$memrd$\RAM$rtl/imem.sv:9$60 (RAM).

16.11. Executing PEEPOPT pass (run peephole optimizers).

16.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

16.13. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module regfile that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\rf$rtl/regfile.sv:17$76 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$rtl/regfile.sv:17$75_Y.
    Found 1 candidates: $memrd$\rf$rtl/regfile.sv:16$73
    Analyzing resource sharing with $memrd$\rf$rtl/regfile.sv:16$73 ($memrd):
      Found 1 activation_patterns using ctrl signal $eq$rtl/regfile.sv:16$72_Y.
      Activation pattern for cell $memrd$\rf$rtl/regfile.sv:17$76: $eq$rtl/regfile.sv:17$75_Y = 1'0
      Activation pattern for cell $memrd$\rf$rtl/regfile.sv:16$73: $eq$rtl/regfile.sv:16$72_Y = 1'0
      Size of SAT problem: 0 cells, 41 variables, 97 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $eq$rtl/regfile.sv:17$75_Y $eq$rtl/regfile.sv:16$72_Y } = 2'00
  Analyzing resource sharing options for $memrd$\rf$rtl/regfile.sv:16$73 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$rtl/regfile.sv:16$72_Y.
    No candidates found.

16.14. Executing TECHMAP pass (map to technology primitives).

16.14.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/cmp2lut.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

16.14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000:
  creating $macc model for $add$rtl/adder.sv:4$459 ($add).
  creating $alu model for $macc $add$rtl/adder.sv:4$459.
  creating $alu cell for $add$rtl/adder.sv:4$459: $auto$alumacc.cc:485:replace_alu$624
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$rtl/alu.sv:10$4 ($add).
  creating $macc model for $add$rtl/alu.sv:10$5 ($add).
  merging $macc model for $add$rtl/alu.sv:10$4 into $add$rtl/alu.sv:10$5.
  creating $alu model for $macc $add$rtl/alu.sv:10$5.
  creating $alu cell for $add$rtl/alu.sv:10$5: $auto$alumacc.cc:485:replace_alu$627
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module arm:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module condcheck:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module condlogic:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module datapath:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module decoder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dmem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module extend:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

16.18. Executing OPT pass (performing simple optimizations).

16.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

16.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.18.6. Executing OPT_DFF pass (perform DFF optimizations).

16.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

16.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.18.9. Rerunning OPT passes. (Maybe there is more to do..)

16.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

16.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.18.13. Executing OPT_DFF pass (perform DFF optimizations).

16.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.18.16. Finished OPT passes. (There is nothing left to do.)

16.19. Executing MEMORY pass.

16.19.1. Executing OPT_MEM pass (optimize memories).
imem.RAM: removing const-0 lane 7
imem.RAM: removing const-0 lane 8
imem.RAM: removing const-0 lane 9
imem.RAM: removing const-0 lane 10
imem.RAM: removing const-0 lane 11
imem.RAM: removing const-0 lane 21
Performed a total of 1 transformations.

16.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing dmem.RAM write port 0.
  Analyzing regfile.rf write port 0.

16.19.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.19.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\RAM'[0] in module `\dmem': no output FF found.
Checking read port address `\RAM'[0] in module `\dmem': no address FF found.
Checking read port `\RAM'[0] in module `\imem': no output FF found.
Checking read port address `\RAM'[0] in module `\imem': no address FF found.
Checking read port `\rf'[0] in module `\regfile': no output FF found.
Checking read port `\rf'[1] in module `\regfile': no output FF found.
Checking read port address `\rf'[0] in module `\regfile': no address FF found.
Checking read port address `\rf'[1] in module `\regfile': no address FF found.

16.19.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.19.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory regfile.rf by address:

16.19.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.19.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.19.10. Executing MEMORY_COLLECT pass (generating $mem cells).

16.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.21. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory dmem.RAM
using FF mapping for memory imem.RAM
using FF mapping for memory regfile.rf
<suppressed ~18 debug messages>

16.22. Executing TECHMAP pass (map to technology primitives).

16.22.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

16.22.2. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

16.22.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

16.23. Executing ICE40_BRAMINIT pass.

16.24. Executing OPT pass (performing simple optimizations).

16.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
<suppressed ~2 debug messages>
Optimizing module arm.
Optimizing module condcheck.
<suppressed ~1 debug messages>
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
<suppressed ~3 debug messages>
Optimizing module dmem.
<suppressed ~3 debug messages>
Optimizing module extend.
<suppressed ~1 debug messages>
Optimizing module imem.
Optimizing module regfile.
<suppressed ~3 debug messages>
Optimizing module top.

16.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.24.3. Executing OPT_DFF pass (perform DFF optimizations).

16.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 13 unused wires.
<suppressed ~11 debug messages>

16.24.5. Finished fast OPT passes.

16.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \RAM in module \dmem:
  created 64 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 63 $mux cells.
  write interface: 64 write mux blocks.
Mapping memory \RAM in module \imem:
  created 64 $dff cells and 0 static cells of width 26.
  read interface: 0 $dff and 63 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \rf in module \regfile:
  created 15 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 30 $mux cells.
  write interface: 15 write mux blocks.

16.26. Executing OPT pass (performing simple optimizations).

16.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
<suppressed ~12 debug messages>
Optimizing module extend.
Optimizing module imem.
<suppressed ~38 debug messages>
Optimizing module regfile.
<suppressed ~13 debug messages>
Optimizing module top.

16.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~94 debug messages>

16.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
    Consolidated identical input bits for $mux cell $procmux$552:
      Old ports: A=10'1001110100, B=10'0001111000, Y=$3\controls[9:0]
      New ports: A=2'01, B=2'10, Y=$3\controls[9:0] [3:2]
      New connections: { $3\controls[9:0] [9:4] $3\controls[9:0] [1:0] } = { $3\controls[9:0] [2] 7'0011100 }
    Consolidated identical input bits for $mux cell $procmux$560:
      Old ports: A=6'001001, B=6'101001, Y=$2\controls[9:0]
      New ports: A=1'0, B=1'1, Y=$2\controls[9:0] [5]
      New connections: $2\controls[9:0] [4:0] = 5'01001
  Optimizing cells in module \decoder.
    Consolidated identical input bits for $pmux cell $procmux$565:
      Old ports: A={ 4'0000 $2\controls[9:0] }, B={ $3\controls[9:0] 10'0110100010 }, Y=\controls
      New ports: A={ $2\controls[9:0] [5] 5'01001 }, B={ 2'11 $3\controls[9:0] [3:2] 8'00100010 }, Y=\controls [5:0]
      New connections: \controls [9:6] = { \controls [2:1] \controls [1] \controls [4] }
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
    Consolidated identical input bits for $pmux cell $procmux$518:
      Old ports: A={ 24'000000000000000000000000 \Instr [7:0] }, B={ 20'00000000000000000000 \Instr [11:0] \Instr [23] \Instr [23] \Instr [23] \Instr [23] \Instr [23] \Instr [23] \Instr 2'00 }, Y=\ExtImm
      New ports: A={ 18'000000000000000000 \Instr [7:0] }, B={ 14'00000000000000 \Instr [11:0] \Instr 2'00 }, Y=\ExtImm [25:0]
      New connections: \ExtImm [31:26] = { \ExtImm [25] \ExtImm [25] \ExtImm [25] \ExtImm [25] \ExtImm [25] \ExtImm [25] }
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][5]$1539:
      Old ports: A=26'10101010000000000000000000, B=26'11100010100000001010000000, Y=$memory\RAM$rdmux[0][4][2]$b$1484
      New ports: A=2'10, B=2'01, Y={ $memory\RAM$rdmux[0][4][2]$b$1484 [21] $memory\RAM$rdmux[0][4][2]$b$1484 [7] }
      New connections: { $memory\RAM$rdmux[0][4][2]$b$1484 [25:22] $memory\RAM$rdmux[0][4][2]$b$1484 [20:8] $memory\RAM$rdmux[0][4][2]$b$1484 [6:0] } = { 1'1 $memory\RAM$rdmux[0][4][2]$b$1484 [7] 5'10010 $memory\RAM$rdmux[0][4][2]$b$1484 [7] 7'0000000 $memory\RAM$rdmux[0][4][2]$b$1484 [7] 8'00000000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][7]$1545:
      Old ports: A=26'11100000010011101110000010, B=26'11100101100001101111010100, Y=$memory\RAM$rdmux[0][4][3]$b$1487
      New ports: A=2'01, B=2'10, Y=$memory\RAM$rdmux[0][4][3]$b$1487 [2:1]
      New connections: { $memory\RAM$rdmux[0][4][3]$b$1487 [25:3] $memory\RAM$rdmux[0][4][3]$b$1487 [0] } = { 5'11100 $memory\RAM$rdmux[0][4][3]$b$1487 [2] 1'0 $memory\RAM$rdmux[0][4][3]$b$1487 [2] $memory\RAM$rdmux[0][4][3]$b$1487 [2:1] 2'00 $memory\RAM$rdmux[0][4][3]$b$1487 [1] 6'110111 $memory\RAM$rdmux[0][4][3]$b$1487 [2] 1'0 $memory\RAM$rdmux[0][4][3]$b$1487 [2] 2'00 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][1]$1527:
      Old ports: A=26'11100010100000000110001100, B=26'11100010010001101110001001, Y=$memory\RAM$rdmux[0][4][0]$b$1478
      New ports: A=2'10, B=2'01, Y={ $memory\RAM$rdmux[0][4][0]$b$1478 [2] $memory\RAM$rdmux[0][4][0]$b$1478 [0] }
      New connections: { $memory\RAM$rdmux[0][4][0]$b$1478 [25:3] $memory\RAM$rdmux[0][4][0]$b$1478 [1] } = { 8'11100010 $memory\RAM$rdmux[0][4][0]$b$1478 [2] $memory\RAM$rdmux[0][4][0]$b$1478 [0] 3'000 $memory\RAM$rdmux[0][4][0]$b$1478 [0] $memory\RAM$rdmux[0][4][0]$b$1478 [0] 1'0 $memory\RAM$rdmux[0][4][0]$b$1478 [0] 7'1100010 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][11]$1557:
      Old ports: A=26'11100101100000000101100100, B=26'x, Y=$memory\RAM$rdmux[0][4][5]$b$1493
      New ports: A=2'10, B=2'x, Y={ $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] }
      New connections: { $memory\RAM$rdmux[0][4][5]$b$1493 [25:3] $memory\RAM$rdmux[0][4][5]$b$1493 [1] } = { $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][2]$1530:
      Old ports: A=26'11100001100011101000000010, B=26'11100000000001101010000100, Y=$memory\RAM$rdmux[0][4][1]$a$1480
      New ports: A=2'01, B=2'10, Y=$memory\RAM$rdmux[0][4][1]$a$1480 [2:1]
      New connections: { $memory\RAM$rdmux[0][4][1]$a$1480 [25:3] $memory\RAM$rdmux[0][4][1]$a$1480 [0] } = { 7'1110000 $memory\RAM$rdmux[0][4][1]$a$1480 [1] $memory\RAM$rdmux[0][4][1]$a$1480 [1] 3'000 $memory\RAM$rdmux[0][4][1]$a$1480 [1] 5'11010 $memory\RAM$rdmux[0][4][1]$a$1480 [2] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][10]$1554:
      Old ports: A=26'11100010100000000100001101, B=26'11100010100000000100001010, Y=$memory\RAM$rdmux[0][4][5]$a$1492
      New ports: A=2'01, B=2'10, Y=$memory\RAM$rdmux[0][4][5]$a$1492 [1:0]
      New connections: $memory\RAM$rdmux[0][4][5]$a$1492 [25:2] = { 23'11100010100000000100001 $memory\RAM$rdmux[0][4][5]$a$1492 [0] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][0]$1524:
      Old ports: A=26'11100000010111100000001111, B=26'11100010100000000100000101, Y=$memory\RAM$rdmux[0][4][0]$a$1477
      New ports: A=2'01, B=2'10, Y={ $memory\RAM$rdmux[0][4][0]$a$1477 [8] $memory\RAM$rdmux[0][4][0]$a$1477 [1] }
      New connections: { $memory\RAM$rdmux[0][4][0]$a$1477 [25:9] $memory\RAM$rdmux[0][4][0]$a$1477 [7:2] $memory\RAM$rdmux[0][4][0]$a$1477 [0] } = { 6'111000 $memory\RAM$rdmux[0][4][0]$a$1477 [8] 1'0 $memory\RAM$rdmux[0][4][0]$a$1477 [8] $memory\RAM$rdmux[0][4][0]$a$1477 [1] 1'0 $memory\RAM$rdmux[0][4][0]$a$1477 [1] $memory\RAM$rdmux[0][4][0]$a$1477 [1] $memory\RAM$rdmux[0][4][0]$a$1477 [1] $memory\RAM$rdmux[0][4][0]$a$1477 [1] 6'000000 $memory\RAM$rdmux[0][4][0]$a$1477 [1] 2'11 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][8]$1548:
      Old ports: A=26'11100101101000000101100000, B=26'11100000100111111110000000, Y=$memory\RAM$rdmux[0][4][4]$a$1489
      New ports: A=2'01, B=2'10, Y={ $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [5] }
      New connections: { $memory\RAM$rdmux[0][4][4]$a$1489 [25:8] $memory\RAM$rdmux[0][4][4]$a$1489 [6] $memory\RAM$rdmux[0][4][4]$a$1489 [4:0] } = { 5'11100 $memory\RAM$rdmux[0][4][4]$a$1489 [5] 1'0 $memory\RAM$rdmux[0][4][4]$a$1489 [5] 2'10 $memory\RAM$rdmux[0][4][4]$a$1489 [5] $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [7] 1'1 $memory\RAM$rdmux[0][4][4]$a$1489 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][4]$1536:
      Old ports: A=26'00001010000000000000001100, B=26'11100000011001110000000100, Y=$memory\RAM$rdmux[0][4][2]$a$1483
      New ports: A=2'01, B=2'10, Y={ $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [3] }
      New connections: { $memory\RAM$rdmux[0][4][2]$a$1483 [25:11] $memory\RAM$rdmux[0][4][2]$a$1483 [9:4] $memory\RAM$rdmux[0][4][2]$a$1483 [2:0] } = { $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [10] 1'0 $memory\RAM$rdmux[0][4][2]$a$1483 [3] 1'0 $memory\RAM$rdmux[0][4][2]$a$1483 [3] 2'00 $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [10] 2'00 $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [10] 9'000000100 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][9]$1551:
      Old ports: A=26'11100010100000000100001110, B=26'11101010000000000000000001, Y=$memory\RAM$rdmux[0][4][4]$b$1490
      New ports: A=2'10, B=2'01, Y=$memory\RAM$rdmux[0][4][4]$b$1490 [1:0]
      New connections: $memory\RAM$rdmux[0][4][4]$b$1490 [25:2] = { 4'1110 $memory\RAM$rdmux[0][4][4]$b$1490 [0] 3'010 $memory\RAM$rdmux[0][4][4]$b$1490 [1] 8'00000000 $memory\RAM$rdmux[0][4][4]$b$1490 [1] 4'0000 $memory\RAM$rdmux[0][4][4]$b$1490 [1] $memory\RAM$rdmux[0][4][4]$b$1490 [1] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][6]$1542:
      Old ports: A=26'11100000011011110000000010, B=26'10110010100010101110000001, Y=$memory\RAM$rdmux[0][4][3]$a$1486
      New ports: A=2'10, B=2'01, Y=$memory\RAM$rdmux[0][4][3]$a$1486 [1:0]
      New connections: $memory\RAM$rdmux[0][4][3]$a$1486 [25:2] = { 1'1 $memory\RAM$rdmux[0][4][3]$a$1486 [1] 1'1 $memory\RAM$rdmux[0][4][3]$a$1486 [0] 2'00 $memory\RAM$rdmux[0][4][3]$a$1486 [0] 1'0 $memory\RAM$rdmux[0][4][3]$a$1486 [0] $memory\RAM$rdmux[0][4][3]$a$1486 [1] $memory\RAM$rdmux[0][4][3]$a$1486 [1] 2'01 $memory\RAM$rdmux[0][4][3]$a$1486 [1] 1'1 $memory\RAM$rdmux[0][4][3]$a$1486 [1:0] $memory\RAM$rdmux[0][4][3]$a$1486 [0] $memory\RAM$rdmux[0][4][3]$a$1486 [0] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][5][3]$1533:
      Old ports: A=26'11100000100010101010000100, B=26'11100000011010110000000111, Y=$memory\RAM$rdmux[0][4][1]$b$1481
      New ports: A=2'10, B=2'01, Y={ $memory\RAM$rdmux[0][4][1]$b$1481 [7] $memory\RAM$rdmux[0][4][1]$b$1481 [0] }
      New connections: { $memory\RAM$rdmux[0][4][1]$b$1481 [25:8] $memory\RAM$rdmux[0][4][1]$b$1481 [6:1] } = { 8'11100000 $memory\RAM$rdmux[0][4][1]$b$1481 [7] $memory\RAM$rdmux[0][4][1]$b$1481 [0] $memory\RAM$rdmux[0][4][1]$b$1481 [0] 4'0101 $memory\RAM$rdmux[0][4][1]$b$1481 [0] $memory\RAM$rdmux[0][4][1]$b$1481 [7] 6'000001 $memory\RAM$rdmux[0][4][1]$b$1481 [0] }
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][5]$1491:
      Old ports: A=$memory\RAM$rdmux[0][4][5]$a$1492, B=$memory\RAM$rdmux[0][4][5]$b$1493, Y=$memory\RAM$rdmux[0][3][2]$b$1460
      New ports: A={ 4'1001 $memory\RAM$rdmux[0][4][5]$a$1492 [0] $memory\RAM$rdmux[0][4][5]$a$1492 [1:0] }, B={ $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [2] $memory\RAM$rdmux[0][4][5]$b$1493 [0] $memory\RAM$rdmux[0][4][5]$b$1493 [0] }, Y={ $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [5:0] }
      New connections: { $memory\RAM$rdmux[0][3][2]$b$1460 [25:9] $memory\RAM$rdmux[0][3][2]$b$1460 [7:6] } = { $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [5] $memory\RAM$rdmux[0][3][2]$b$1460 [3] $memory\RAM$rdmux[0][3][2]$b$1460 [5] $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [5] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][4]$1488:
      Old ports: A=$memory\RAM$rdmux[0][4][4]$a$1489, B=$memory\RAM$rdmux[0][4][4]$b$1490, Y=$memory\RAM$rdmux[0][3][2]$a$1459
      New ports: A={ 2'01 $memory\RAM$rdmux[0][4][4]$a$1489 [7] $memory\RAM$rdmux[0][4][4]$a$1489 [5] 2'00 }, B={ 1'1 $memory\RAM$rdmux[0][4][4]$b$1490 [1] 2'00 $memory\RAM$rdmux[0][4][4]$b$1490 [1:0] }, Y={ $memory\RAM$rdmux[0][3][2]$a$1459 [19] $memory\RAM$rdmux[0][3][2]$a$1459 [8:7] $memory\RAM$rdmux[0][3][2]$a$1459 [5] $memory\RAM$rdmux[0][3][2]$a$1459 [1:0] }
      New connections: { $memory\RAM$rdmux[0][3][2]$a$1459 [25:20] $memory\RAM$rdmux[0][3][2]$a$1459 [18:9] $memory\RAM$rdmux[0][3][2]$a$1459 [6] $memory\RAM$rdmux[0][3][2]$a$1459 [4:2] } = { 4'1110 $memory\RAM$rdmux[0][3][2]$a$1459 [0] $memory\RAM$rdmux[0][3][2]$a$1459 [5] $memory\RAM$rdmux[0][3][2]$a$1459 [5] $memory\RAM$rdmux[0][3][2]$a$1459 [8] 1'0 $memory\RAM$rdmux[0][3][2]$a$1459 [5] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [7] $memory\RAM$rdmux[0][3][2]$a$1459 [5] 1'0 $memory\RAM$rdmux[0][3][2]$a$1459 [1] $memory\RAM$rdmux[0][3][2]$a$1459 [1] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][3]$1485:
      Old ports: A=$memory\RAM$rdmux[0][4][3]$a$1486, B=$memory\RAM$rdmux[0][4][3]$b$1487, Y=$memory\RAM$rdmux[0][3][1]$b$1457
      New ports: A={ $memory\RAM$rdmux[0][4][3]$a$1486 [0] 1'1 $memory\RAM$rdmux[0][4][3]$a$1486 [1] $memory\RAM$rdmux[0][4][3]$a$1486 [1:0] 1'0 $memory\RAM$rdmux[0][4][3]$a$1486 [1:0] }, B={ $memory\RAM$rdmux[0][4][3]$b$1487 [2:1] 3'101 $memory\RAM$rdmux[0][4][3]$b$1487 [2:1] 1'0 }, Y={ $memory\RAM$rdmux[0][3][1]$b$1457 [17] $memory\RAM$rdmux[0][3][1]$b$1457 [13:12] $memory\RAM$rdmux[0][3][1]$b$1457 [10] $memory\RAM$rdmux[0][3][1]$b$1457 [7] $memory\RAM$rdmux[0][3][1]$b$1457 [2:0] }
      New connections: { $memory\RAM$rdmux[0][3][1]$b$1457 [25:18] $memory\RAM$rdmux[0][3][1]$b$1457 [16:14] $memory\RAM$rdmux[0][3][1]$b$1457 [11] $memory\RAM$rdmux[0][3][1]$b$1457 [9:8] $memory\RAM$rdmux[0][3][1]$b$1457 [6:3] } = { 1'1 $memory\RAM$rdmux[0][3][1]$b$1457 [12] 1'1 $memory\RAM$rdmux[0][3][1]$b$1457 [0] 1'0 $memory\RAM$rdmux[0][3][1]$b$1457 [2] $memory\RAM$rdmux[0][3][1]$b$1457 [0] $memory\RAM$rdmux[0][3][1]$b$1457 [2:1] $memory\RAM$rdmux[0][3][1]$b$1457 [10] 2'01 $memory\RAM$rdmux[0][3][1]$b$1457 [7] $memory\RAM$rdmux[0][3][1]$b$1457 [7] $memory\RAM$rdmux[0][3][1]$b$1457 [2] 1'0 $memory\RAM$rdmux[0][3][1]$b$1457 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][2]$1482:
      Old ports: A=$memory\RAM$rdmux[0][4][2]$a$1483, B=$memory\RAM$rdmux[0][4][2]$b$1484, Y=$memory\RAM$rdmux[0][3][1]$a$1456
      New ports: A={ $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [10] $memory\RAM$rdmux[0][4][2]$a$1483 [3] $memory\RAM$rdmux[0][4][2]$a$1483 [3] $memory\RAM$rdmux[0][4][2]$a$1483 [10] 1'0 $memory\RAM$rdmux[0][4][2]$a$1483 [3] 1'1 }, B={ $memory\RAM$rdmux[0][4][2]$b$1484 [7] 1'1 $memory\RAM$rdmux[0][4][2]$b$1484 [21] 2'10 $memory\RAM$rdmux[0][4][2]$b$1484 [7] 2'00 }, Y={ $memory\RAM$rdmux[0][3][1]$a$1456 [24:23] $memory\RAM$rdmux[0][3][1]$a$1456 [21] $memory\RAM$rdmux[0][3][1]$a$1456 [19] $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [7] $memory\RAM$rdmux[0][3][1]$a$1456 [3:2] }
      New connections: { $memory\RAM$rdmux[0][3][1]$a$1456 [25] $memory\RAM$rdmux[0][3][1]$a$1456 [22] $memory\RAM$rdmux[0][3][1]$a$1456 [20] $memory\RAM$rdmux[0][3][1]$a$1456 [18:11] $memory\RAM$rdmux[0][3][1]$a$1456 [9:8] $memory\RAM$rdmux[0][3][1]$a$1456 [6:4] $memory\RAM$rdmux[0][3][1]$a$1456 [1:0] } = { $memory\RAM$rdmux[0][3][1]$a$1456 [23] 3'000 $memory\RAM$rdmux[0][3][1]$a$1456 [7] $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [10] 2'00 $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [7] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][1]$1479:
      Old ports: A=$memory\RAM$rdmux[0][4][1]$a$1480, B=$memory\RAM$rdmux[0][4][1]$b$1481, Y=$memory\RAM$rdmux[0][3][0]$b$1454
      New ports: A={ $memory\RAM$rdmux[0][4][1]$a$1480 [1] $memory\RAM$rdmux[0][4][1]$a$1480 [1] $memory\RAM$rdmux[0][4][1]$a$1480 [1] 2'11 $memory\RAM$rdmux[0][4][1]$a$1480 [2] $memory\RAM$rdmux[0][4][1]$a$1480 [2:1] 1'0 }, B={ 1'0 $memory\RAM$rdmux[0][4][1]$b$1481 [7] 2'10 $memory\RAM$rdmux[0][4][1]$b$1481 [7] $memory\RAM$rdmux[0][4][1]$b$1481 [7] 1'1 $memory\RAM$rdmux[0][4][1]$b$1481 [0] $memory\RAM$rdmux[0][4][1]$b$1481 [0] }, Y={ $memory\RAM$rdmux[0][3][0]$b$1454 [18:17] $memory\RAM$rdmux[0][3][0]$b$1454 [13:12] $memory\RAM$rdmux[0][3][0]$b$1454 [9] $memory\RAM$rdmux[0][3][0]$b$1454 [7] $memory\RAM$rdmux[0][3][0]$b$1454 [2:0] }
      New connections: { $memory\RAM$rdmux[0][3][0]$b$1454 [25:19] $memory\RAM$rdmux[0][3][0]$b$1454 [16:14] $memory\RAM$rdmux[0][3][0]$b$1454 [11:10] $memory\RAM$rdmux[0][3][0]$b$1454 [8] $memory\RAM$rdmux[0][3][0]$b$1454 [6:3] } = { 7'1110000 $memory\RAM$rdmux[0][3][0]$b$1454 [0] $memory\RAM$rdmux[0][3][0]$b$1454 [0] 2'01 $memory\RAM$rdmux[0][3][0]$b$1454 [0] 5'00000 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][4][0]$1476:
      Old ports: A=$memory\RAM$rdmux[0][4][0]$a$1477, B=$memory\RAM$rdmux[0][4][0]$b$1478, Y=$memory\RAM$rdmux[0][3][0]$a$1453
      New ports: A={ $memory\RAM$rdmux[0][4][0]$a$1477 [8] $memory\RAM$rdmux[0][4][0]$a$1477 [1] 1'0 $memory\RAM$rdmux[0][4][0]$a$1477 [8] 1'0 $memory\RAM$rdmux[0][4][0]$a$1477 [1] 1'1 $memory\RAM$rdmux[0][4][0]$a$1477 [1] 1'1 }, B={ $memory\RAM$rdmux[0][4][0]$b$1478 [2] $memory\RAM$rdmux[0][4][0]$b$1478 [0] $memory\RAM$rdmux[0][4][0]$b$1478 [0] 3'111 $memory\RAM$rdmux[0][4][0]$b$1478 [2] 1'0 $memory\RAM$rdmux[0][4][0]$b$1478 [0] }, Y={ $memory\RAM$rdmux[0][3][0]$a$1453 [17] $memory\RAM$rdmux[0][3][0]$a$1453 [11] $memory\RAM$rdmux[0][3][0]$a$1453 [9:7] $memory\RAM$rdmux[0][3][0]$a$1453 [3:0] }
      New connections: { $memory\RAM$rdmux[0][3][0]$a$1453 [25:18] $memory\RAM$rdmux[0][3][0]$a$1453 [16:12] $memory\RAM$rdmux[0][3][0]$a$1453 [10] $memory\RAM$rdmux[0][3][0]$a$1453 [6:4] } = { 6'111000 $memory\RAM$rdmux[0][3][0]$a$1453 [8] 1'0 $memory\RAM$rdmux[0][3][0]$a$1453 [11] 1'0 $memory\RAM$rdmux[0][3][0]$a$1453 [1] $memory\RAM$rdmux[0][3][0]$a$1453 [1] $memory\RAM$rdmux[0][3][0]$a$1453 [11] 4'0000 }
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][3][2]$1458:
      Old ports: A=$memory\RAM$rdmux[0][3][2]$a$1459, B=$memory\RAM$rdmux[0][3][2]$b$1460, Y=$memory\RAM$rdmux[0][2][1]$a$1444
      New ports: A={ 1'1 $memory\RAM$rdmux[0][3][2]$a$1459 [0] $memory\RAM$rdmux[0][3][2]$a$1459 [19] $memory\RAM$rdmux[0][3][2]$a$1459 [5] $memory\RAM$rdmux[0][3][2]$a$1459 [8:7] $memory\RAM$rdmux[0][3][2]$a$1459 [5] 1'0 $memory\RAM$rdmux[0][3][2]$a$1459 [1] $memory\RAM$rdmux[0][3][2]$a$1459 [1] $memory\RAM$rdmux[0][3][2]$a$1459 [1:0] }, B={ $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [4:3] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [8] $memory\RAM$rdmux[0][3][2]$b$1460 [4] $memory\RAM$rdmux[0][3][2]$b$1460 [5:0] }, Y={ $memory\RAM$rdmux[0][2][1]$a$1444 [23] $memory\RAM$rdmux[0][2][1]$a$1444 [21] $memory\RAM$rdmux[0][2][1]$a$1444 [19] $memory\RAM$rdmux[0][2][1]$a$1444 [15] $memory\RAM$rdmux[0][2][1]$a$1444 [8:7] $memory\RAM$rdmux[0][2][1]$a$1444 [5:0] }
      New connections: { $memory\RAM$rdmux[0][2][1]$a$1444 [25:24] $memory\RAM$rdmux[0][2][1]$a$1444 [22] $memory\RAM$rdmux[0][2][1]$a$1444 [20] $memory\RAM$rdmux[0][2][1]$a$1444 [18:16] $memory\RAM$rdmux[0][2][1]$a$1444 [14:9] $memory\RAM$rdmux[0][2][1]$a$1444 [6] } = { $memory\RAM$rdmux[0][2][1]$a$1444 [23] $memory\RAM$rdmux[0][2][1]$a$1444 [23] $memory\RAM$rdmux[0][2][1]$a$1444 [4] $memory\RAM$rdmux[0][2][1]$a$1444 [5] $memory\RAM$rdmux[0][2][1]$a$1444 [5] $memory\RAM$rdmux[0][2][1]$a$1444 [8] $memory\RAM$rdmux[0][2][1]$a$1444 [4] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [7] $memory\RAM$rdmux[0][2][1]$a$1444 [5] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][3][1]$1455:
      Old ports: A=$memory\RAM$rdmux[0][3][1]$a$1456, B=$memory\RAM$rdmux[0][3][1]$b$1457, Y=$memory\RAM$rdmux[0][2][0]$b$1442
      New ports: A={ $memory\RAM$rdmux[0][3][1]$a$1456 [24:23] $memory\RAM$rdmux[0][3][1]$a$1456 [21] $memory\RAM$rdmux[0][3][1]$a$1456 [19] $memory\RAM$rdmux[0][3][1]$a$1456 [7] $memory\RAM$rdmux[0][3][1]$a$1456 [10] 1'0 $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [10] $memory\RAM$rdmux[0][3][1]$a$1456 [10] 1'0 $memory\RAM$rdmux[0][3][1]$a$1456 [7] 1'0 $memory\RAM$rdmux[0][3][1]$a$1456 [3:2] 2'00 }, B={ $memory\RAM$rdmux[0][3][1]$b$1457 [12] 2'10 $memory\RAM$rdmux[0][3][1]$b$1457 [0] $memory\RAM$rdmux[0][3][1]$b$1457 [17] $memory\RAM$rdmux[0][3][1]$b$1457 [1] $memory\RAM$rdmux[0][3][1]$b$1457 [13:12] 1'1 $memory\RAM$rdmux[0][3][1]$b$1457 [10] $memory\RAM$rdmux[0][3][1]$b$1457 [7] $memory\RAM$rdmux[0][3][1]$b$1457 [7] $memory\RAM$rdmux[0][3][1]$b$1457 [2] 1'0 $memory\RAM$rdmux[0][3][1]$b$1457 [2:0] }, Y={ $memory\RAM$rdmux[0][2][0]$b$1442 [24:23] $memory\RAM$rdmux[0][2][0]$b$1442 [21] $memory\RAM$rdmux[0][2][0]$b$1442 [19] $memory\RAM$rdmux[0][2][0]$b$1442 [17:16] $memory\RAM$rdmux[0][2][0]$b$1442 [13:10] $memory\RAM$rdmux[0][2][0]$b$1442 [8:7] $memory\RAM$rdmux[0][2][0]$b$1442 [4:0] }
      New connections: { $memory\RAM$rdmux[0][2][0]$b$1442 [25] $memory\RAM$rdmux[0][2][0]$b$1442 [22] $memory\RAM$rdmux[0][2][0]$b$1442 [20] $memory\RAM$rdmux[0][2][0]$b$1442 [18] $memory\RAM$rdmux[0][2][0]$b$1442 [15:14] $memory\RAM$rdmux[0][2][0]$b$1442 [9] $memory\RAM$rdmux[0][2][0]$b$1442 [6:5] } = { $memory\RAM$rdmux[0][2][0]$b$1442 [23] $memory\RAM$rdmux[0][2][0]$b$1442 [0] $memory\RAM$rdmux[0][2][0]$b$1442 [4] $memory\RAM$rdmux[0][2][0]$b$1442 [4] $memory\RAM$rdmux[0][2][0]$b$1442 [10] 1'0 $memory\RAM$rdmux[0][2][0]$b$1442 [7] $memory\RAM$rdmux[0][2][0]$b$1442 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][3][0]$1452:
      Old ports: A=$memory\RAM$rdmux[0][3][0]$a$1453, B=$memory\RAM$rdmux[0][3][0]$b$1454, Y=$memory\RAM$rdmux[0][2][0]$a$1441
      New ports: A={ 1'0 $memory\RAM$rdmux[0][3][0]$a$1453 [17] $memory\RAM$rdmux[0][3][0]$a$1453 [11] $memory\RAM$rdmux[0][3][0]$a$1453 [1] $memory\RAM$rdmux[0][3][0]$a$1453 [1] $memory\RAM$rdmux[0][3][0]$a$1453 [11] $memory\RAM$rdmux[0][3][0]$a$1453 [11] 1'0 $memory\RAM$rdmux[0][3][0]$a$1453 [9:7] $memory\RAM$rdmux[0][3][0]$a$1453 [3:0] }, B={ $memory\RAM$rdmux[0][3][0]$b$1454 [18:17] $memory\RAM$rdmux[0][3][0]$b$1454 [0] 1'0 $memory\RAM$rdmux[0][3][0]$b$1454 [13:12] 1'1 $memory\RAM$rdmux[0][3][0]$b$1454 [0] $memory\RAM$rdmux[0][3][0]$b$1454 [9] 1'0 $memory\RAM$rdmux[0][3][0]$b$1454 [7] 1'0 $memory\RAM$rdmux[0][3][0]$b$1454 [2:0] }, Y={ $memory\RAM$rdmux[0][2][0]$a$1441 [18:16] $memory\RAM$rdmux[0][2][0]$a$1441 [14:7] $memory\RAM$rdmux[0][2][0]$a$1441 [3:0] }
      New connections: { $memory\RAM$rdmux[0][2][0]$a$1441 [25:19] $memory\RAM$rdmux[0][2][0]$a$1441 [15] $memory\RAM$rdmux[0][2][0]$a$1441 [6:4] } = { 6'111000 $memory\RAM$rdmux[0][2][0]$a$1441 [8] $memory\RAM$rdmux[0][2][0]$a$1441 [10] 3'000 }
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][2][1]$1443:
      Old ports: A=$memory\RAM$rdmux[0][2][1]$a$1444, B=26'x, Y=$memory\RAM$rdmux[0][1][0]$b$1436
      New ports: A={ $memory\RAM$rdmux[0][2][1]$a$1444 [23] $memory\RAM$rdmux[0][2][1]$a$1444 [21] $memory\RAM$rdmux[0][2][1]$a$1444 [19] $memory\RAM$rdmux[0][2][1]$a$1444 [15] $memory\RAM$rdmux[0][2][1]$a$1444 [8:7] $memory\RAM$rdmux[0][2][1]$a$1444 [5:0] }, B=12'x, Y={ $memory\RAM$rdmux[0][1][0]$b$1436 [23] $memory\RAM$rdmux[0][1][0]$b$1436 [21] $memory\RAM$rdmux[0][1][0]$b$1436 [19] $memory\RAM$rdmux[0][1][0]$b$1436 [15] $memory\RAM$rdmux[0][1][0]$b$1436 [8:7] $memory\RAM$rdmux[0][1][0]$b$1436 [5:0] }
      New connections: { $memory\RAM$rdmux[0][1][0]$b$1436 [25:24] $memory\RAM$rdmux[0][1][0]$b$1436 [22] $memory\RAM$rdmux[0][1][0]$b$1436 [20] $memory\RAM$rdmux[0][1][0]$b$1436 [18:16] $memory\RAM$rdmux[0][1][0]$b$1436 [14:9] $memory\RAM$rdmux[0][1][0]$b$1436 [6] } = { $memory\RAM$rdmux[0][1][0]$b$1436 [23] $memory\RAM$rdmux[0][1][0]$b$1436 [23] $memory\RAM$rdmux[0][1][0]$b$1436 [4] $memory\RAM$rdmux[0][1][0]$b$1436 [5] $memory\RAM$rdmux[0][1][0]$b$1436 [5] $memory\RAM$rdmux[0][1][0]$b$1436 [8] $memory\RAM$rdmux[0][1][0]$b$1436 [4] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [5] }
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][2][0]$1440:
      Old ports: A=$memory\RAM$rdmux[0][2][0]$a$1441, B=$memory\RAM$rdmux[0][2][0]$b$1442, Y=$memory\RAM$rdmux[0][1][0]$a$1435
      New ports: A={ 4'1100 $memory\RAM$rdmux[0][2][0]$a$1441 [8] $memory\RAM$rdmux[0][2][0]$a$1441 [18:16] $memory\RAM$rdmux[0][2][0]$a$1441 [14:7] 1'0 $memory\RAM$rdmux[0][2][0]$a$1441 [3:0] }, B={ $memory\RAM$rdmux[0][2][0]$b$1442 [24:23] $memory\RAM$rdmux[0][2][0]$b$1442 [0] $memory\RAM$rdmux[0][2][0]$b$1442 [21] $memory\RAM$rdmux[0][2][0]$b$1442 [19] $memory\RAM$rdmux[0][2][0]$b$1442 [4] $memory\RAM$rdmux[0][2][0]$b$1442 [17:16] 1'0 $memory\RAM$rdmux[0][2][0]$b$1442 [13:10] $memory\RAM$rdmux[0][2][0]$b$1442 [7] $memory\RAM$rdmux[0][2][0]$b$1442 [8:7] $memory\RAM$rdmux[0][2][0]$b$1442 [4:0] }, Y={ $memory\RAM$rdmux[0][1][0]$a$1435 [24:21] $memory\RAM$rdmux[0][1][0]$a$1435 [19:16] $memory\RAM$rdmux[0][1][0]$a$1435 [14:7] $memory\RAM$rdmux[0][1][0]$a$1435 [4:0] }
      New connections: { $memory\RAM$rdmux[0][1][0]$a$1435 [25] $memory\RAM$rdmux[0][1][0]$a$1435 [20] $memory\RAM$rdmux[0][1][0]$a$1435 [15] $memory\RAM$rdmux[0][1][0]$a$1435 [6:5] } = { $memory\RAM$rdmux[0][1][0]$a$1435 [23] $memory\RAM$rdmux[0][1][0]$a$1435 [4] $memory\RAM$rdmux[0][1][0]$a$1435 [10] $memory\RAM$rdmux[0][1][0]$a$1435 [4] 1'0 }
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][1][0]$1434:
      Old ports: A=$memory\RAM$rdmux[0][1][0]$a$1435, B=$memory\RAM$rdmux[0][1][0]$b$1436, Y=$memory\RAM$rdmux[0][0][0]$a$1432
      New ports: A={ $memory\RAM$rdmux[0][1][0]$a$1435 [24:21] $memory\RAM$rdmux[0][1][0]$a$1435 [19:16] $memory\RAM$rdmux[0][1][0]$a$1435 [10] $memory\RAM$rdmux[0][1][0]$a$1435 [14:7] $memory\RAM$rdmux[0][1][0]$a$1435 [4] 1'0 $memory\RAM$rdmux[0][1][0]$a$1435 [4:0] }, B={ $memory\RAM$rdmux[0][1][0]$b$1436 [23] $memory\RAM$rdmux[0][1][0]$b$1436 [23] $memory\RAM$rdmux[0][1][0]$b$1436 [4] $memory\RAM$rdmux[0][1][0]$b$1436 [21] $memory\RAM$rdmux[0][1][0]$b$1436 [19] $memory\RAM$rdmux[0][1][0]$b$1436 [5] $memory\RAM$rdmux[0][1][0]$b$1436 [8] $memory\RAM$rdmux[0][1][0]$b$1436 [4] $memory\RAM$rdmux[0][1][0]$b$1436 [15] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [7] $memory\RAM$rdmux[0][1][0]$b$1436 [8:7] $memory\RAM$rdmux[0][1][0]$b$1436 [5] $memory\RAM$rdmux[0][1][0]$b$1436 [5:0] }, Y={ $memory\RAM$rdmux[0][0][0]$a$1432 [24:21] $memory\RAM$rdmux[0][0][0]$a$1432 [19:0] }
      New connections: { $memory\RAM$rdmux[0][0][0]$a$1432 [25] $memory\RAM$rdmux[0][0][0]$a$1432 [20] } = { $memory\RAM$rdmux[0][0][0]$a$1432 [23] $memory\RAM$rdmux[0][0][0]$a$1432 [6] }
  Optimizing cells in module \imem.
    Consolidated identical input bits for $mux cell $memory\RAM$rdmux[0][0][0]$1431:
      Old ports: A=$memory\RAM$rdmux[0][0][0]$a$1432, B=26'x, Y={ \rd [31:22] \rd [20:12] \rd [6:0] }
      New ports: A={ $memory\RAM$rdmux[0][0][0]$a$1432 [24:21] $memory\RAM$rdmux[0][0][0]$a$1432 [19:0] }, B=24'x, Y={ \rd [30:27] \rd [25:22] \rd [20:12] \rd [6:0] }
      New connections: { \rd [31] \rd [26] } = { \rd [29] \rd [6] }
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 29 changes.

16.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
<suppressed ~27 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 9 cells.

16.26.6. Executing OPT_DFF pass (perform DFF optimizations).

16.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 296 unused wires.
<suppressed ~3 debug messages>

16.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.26.9. Rerunning OPT passes. (Maybe there is more to do..)

16.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~96 debug messages>

16.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.26.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\RAM[9]$676 ($dff) from module dmem (D = \wd, Q = \RAM[9]).
Adding EN signal on $memory\RAM[8]$674 ($dff) from module dmem (D = \wd, Q = \RAM[8]).
Adding EN signal on $memory\RAM[7]$672 ($dff) from module dmem (D = \wd, Q = \RAM[7]).
Adding EN signal on $memory\RAM[6]$670 ($dff) from module dmem (D = \wd, Q = \RAM[6]).
Adding EN signal on $memory\RAM[63]$784 ($dff) from module dmem (D = \wd, Q = \RAM[63]).
Adding EN signal on $memory\RAM[62]$782 ($dff) from module dmem (D = \wd, Q = \RAM[62]).
Adding EN signal on $memory\RAM[61]$780 ($dff) from module dmem (D = \wd, Q = \RAM[61]).
Adding EN signal on $memory\RAM[60]$778 ($dff) from module dmem (D = \wd, Q = \RAM[60]).
Adding EN signal on $memory\RAM[5]$668 ($dff) from module dmem (D = \wd, Q = \RAM[5]).
Adding EN signal on $memory\RAM[59]$776 ($dff) from module dmem (D = \wd, Q = \RAM[59]).
Adding EN signal on $memory\RAM[58]$774 ($dff) from module dmem (D = \wd, Q = \RAM[58]).
Adding EN signal on $memory\RAM[57]$772 ($dff) from module dmem (D = \wd, Q = \RAM[57]).
Adding EN signal on $memory\RAM[56]$770 ($dff) from module dmem (D = \wd, Q = \RAM[56]).
Adding EN signal on $memory\RAM[55]$768 ($dff) from module dmem (D = \wd, Q = \RAM[55]).
Adding EN signal on $memory\RAM[54]$766 ($dff) from module dmem (D = \wd, Q = \RAM[54]).
Adding EN signal on $memory\RAM[53]$764 ($dff) from module dmem (D = \wd, Q = \RAM[53]).
Adding EN signal on $memory\RAM[52]$762 ($dff) from module dmem (D = \wd, Q = \RAM[52]).
Adding EN signal on $memory\RAM[51]$760 ($dff) from module dmem (D = \wd, Q = \RAM[51]).
Adding EN signal on $memory\RAM[50]$758 ($dff) from module dmem (D = \wd, Q = \RAM[50]).
Adding EN signal on $memory\RAM[4]$666 ($dff) from module dmem (D = \wd, Q = \RAM[4]).
Adding EN signal on $memory\RAM[49]$756 ($dff) from module dmem (D = \wd, Q = \RAM[49]).
Adding EN signal on $memory\RAM[48]$754 ($dff) from module dmem (D = \wd, Q = \RAM[48]).
Adding EN signal on $memory\RAM[47]$752 ($dff) from module dmem (D = \wd, Q = \RAM[47]).
Adding EN signal on $memory\RAM[46]$750 ($dff) from module dmem (D = \wd, Q = \RAM[46]).
Adding EN signal on $memory\RAM[45]$748 ($dff) from module dmem (D = \wd, Q = \RAM[45]).
Adding EN signal on $memory\RAM[44]$746 ($dff) from module dmem (D = \wd, Q = \RAM[44]).
Adding EN signal on $memory\RAM[43]$744 ($dff) from module dmem (D = \wd, Q = \RAM[43]).
Adding EN signal on $memory\RAM[42]$742 ($dff) from module dmem (D = \wd, Q = \RAM[42]).
Adding EN signal on $memory\RAM[41]$740 ($dff) from module dmem (D = \wd, Q = \RAM[41]).
Adding EN signal on $memory\RAM[40]$738 ($dff) from module dmem (D = \wd, Q = \RAM[40]).
Adding EN signal on $memory\RAM[3]$664 ($dff) from module dmem (D = \wd, Q = \RAM[3]).
Adding EN signal on $memory\RAM[39]$736 ($dff) from module dmem (D = \wd, Q = \RAM[39]).
Adding EN signal on $memory\RAM[38]$734 ($dff) from module dmem (D = \wd, Q = \RAM[38]).
Adding EN signal on $memory\RAM[37]$732 ($dff) from module dmem (D = \wd, Q = \RAM[37]).
Adding EN signal on $memory\RAM[36]$730 ($dff) from module dmem (D = \wd, Q = \RAM[36]).
Adding EN signal on $memory\RAM[35]$728 ($dff) from module dmem (D = \wd, Q = \RAM[35]).
Adding EN signal on $memory\RAM[34]$726 ($dff) from module dmem (D = \wd, Q = \RAM[34]).
Adding EN signal on $memory\RAM[33]$724 ($dff) from module dmem (D = \wd, Q = \RAM[33]).
Adding EN signal on $memory\RAM[32]$722 ($dff) from module dmem (D = \wd, Q = \RAM[32]).
Adding EN signal on $memory\RAM[31]$720 ($dff) from module dmem (D = \wd, Q = \RAM[31]).
Adding EN signal on $memory\RAM[30]$718 ($dff) from module dmem (D = \wd, Q = \RAM[30]).
Adding EN signal on $memory\RAM[2]$662 ($dff) from module dmem (D = \wd, Q = \RAM[2]).
Adding EN signal on $memory\RAM[29]$716 ($dff) from module dmem (D = \wd, Q = \RAM[29]).
Adding EN signal on $memory\RAM[28]$714 ($dff) from module dmem (D = \wd, Q = \RAM[28]).
Adding EN signal on $memory\RAM[27]$712 ($dff) from module dmem (D = \wd, Q = \RAM[27]).
Adding EN signal on $memory\RAM[26]$710 ($dff) from module dmem (D = \wd, Q = \RAM[26]).
Adding EN signal on $memory\RAM[25]$708 ($dff) from module dmem (D = \wd, Q = \RAM[25]).
Adding EN signal on $memory\RAM[24]$706 ($dff) from module dmem (D = \wd, Q = \RAM[24]).
Adding EN signal on $memory\RAM[23]$704 ($dff) from module dmem (D = \wd, Q = \RAM[23]).
Adding EN signal on $memory\RAM[22]$702 ($dff) from module dmem (D = \wd, Q = \RAM[22]).
Adding EN signal on $memory\RAM[21]$700 ($dff) from module dmem (D = \wd, Q = \RAM[21]).
Adding EN signal on $memory\RAM[20]$698 ($dff) from module dmem (D = \wd, Q = \RAM[20]).
Adding EN signal on $memory\RAM[1]$660 ($dff) from module dmem (D = \wd, Q = \RAM[1]).
Adding EN signal on $memory\RAM[19]$696 ($dff) from module dmem (D = \wd, Q = \RAM[19]).
Adding EN signal on $memory\RAM[18]$694 ($dff) from module dmem (D = \wd, Q = \RAM[18]).
Adding EN signal on $memory\RAM[17]$692 ($dff) from module dmem (D = \wd, Q = \RAM[17]).
Adding EN signal on $memory\RAM[16]$690 ($dff) from module dmem (D = \wd, Q = \RAM[16]).
Adding EN signal on $memory\RAM[15]$688 ($dff) from module dmem (D = \wd, Q = \RAM[15]).
Adding EN signal on $memory\RAM[14]$686 ($dff) from module dmem (D = \wd, Q = \RAM[14]).
Adding EN signal on $memory\RAM[13]$684 ($dff) from module dmem (D = \wd, Q = \RAM[13]).
Adding EN signal on $memory\RAM[12]$682 ($dff) from module dmem (D = \wd, Q = \RAM[12]).
Adding EN signal on $memory\RAM[11]$680 ($dff) from module dmem (D = \wd, Q = \RAM[11]).
Adding EN signal on $memory\RAM[10]$678 ($dff) from module dmem (D = \wd, Q = \RAM[10]).
Adding EN signal on $memory\RAM[0]$658 ($dff) from module dmem (D = \wd, Q = \RAM[0]).
Adding EN signal on $memory\rf[9]$1638 ($dff) from module regfile (D = \wd3, Q = \rf[9]).
Adding EN signal on $memory\rf[8]$1636 ($dff) from module regfile (D = \wd3, Q = \rf[8]).
Adding EN signal on $memory\rf[7]$1634 ($dff) from module regfile (D = \wd3, Q = \rf[7]).
Adding EN signal on $memory\rf[6]$1632 ($dff) from module regfile (D = \wd3, Q = \rf[6]).
Adding EN signal on $memory\rf[5]$1630 ($dff) from module regfile (D = \wd3, Q = \rf[5]).
Adding EN signal on $memory\rf[4]$1628 ($dff) from module regfile (D = \wd3, Q = \rf[4]).
Adding EN signal on $memory\rf[3]$1626 ($dff) from module regfile (D = \wd3, Q = \rf[3]).
Adding EN signal on $memory\rf[2]$1624 ($dff) from module regfile (D = \wd3, Q = \rf[2]).
Adding EN signal on $memory\rf[1]$1622 ($dff) from module regfile (D = \wd3, Q = \rf[1]).
Adding EN signal on $memory\rf[14]$1648 ($dff) from module regfile (D = \wd3, Q = \rf[14]).
Adding EN signal on $memory\rf[13]$1646 ($dff) from module regfile (D = \wd3, Q = \rf[13]).
Adding EN signal on $memory\rf[12]$1644 ($dff) from module regfile (D = \wd3, Q = \rf[12]).
Adding EN signal on $memory\rf[11]$1642 ($dff) from module regfile (D = \wd3, Q = \rf[11]).
Adding EN signal on $memory\rf[10]$1640 ($dff) from module regfile (D = \wd3, Q = \rf[10]).
Adding EN signal on $memory\rf[0]$1620 ($dff) from module regfile (D = \wd3, Q = \rf[0]).

16.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 79 unused cells and 79 unused wires.
<suppressed ~81 debug messages>

16.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.26.16. Rerunning OPT passes. (Maybe there is more to do..)

16.26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \condcheck..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \condlogic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \extend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

16.26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
  Optimizing cells in module \arm.
  Optimizing cells in module \condcheck.
  Optimizing cells in module \condlogic.
  Optimizing cells in module \controller.
  Optimizing cells in module \datapath.
  Optimizing cells in module \decoder.
  Optimizing cells in module \dmem.
  Optimizing cells in module \extend.
  Optimizing cells in module \imem.
  Optimizing cells in module \regfile.
  Optimizing cells in module \top.
Performed a total of 0 changes.

16.26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.26.20. Executing OPT_DFF pass (perform DFF optimizations).

16.26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.26.23. Finished OPT passes. (There is nothing left to do.)

16.27. Executing ICE40_WRAPCARRY pass (wrap carries).

16.28. Executing TECHMAP pass (map to technology primitives).

16.28.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

16.28.2. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

16.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod$55fabc38af77a7e92aab69f00033bfed03b847e2\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $or.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$ed0bb9616228df1e6c226f91f8133e751815f1b1\_90_pmux for cells of type $pmux.
Using template $paramod$3ab9a015ab781a81f86ab59e92093de7732cf40e\_90_pmux for cells of type $pmux.
Using template $paramod$857150d3a9b7fb38b73bbaa31ff652415e553f98\_80_ice40_alu for cells of type $alu.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_80_ice40_alu for cells of type $alu.
No more expansions possible.
<suppressed ~741 debug messages>

16.29. Executing OPT pass (performing simple optimizations).

16.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
<suppressed ~32 debug messages>
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
<suppressed ~39 debug messages>
Optimizing module arm.
Optimizing module condcheck.
<suppressed ~58 debug messages>
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
<suppressed ~47 debug messages>
Optimizing module dmem.
Optimizing module extend.
<suppressed ~36 debug messages>
Optimizing module imem.
<suppressed ~6 debug messages>
Optimizing module regfile.
<suppressed ~72 debug messages>
Optimizing module top.

16.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
<suppressed ~132 debug messages>
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
<suppressed ~12 debug messages>
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
<suppressed ~81 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 76 cells.

16.29.3. Executing OPT_DFF pass (perform DFF optimizations).

16.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 131 unused cells and 413 unused wires.
<suppressed ~139 debug messages>

16.29.5. Finished fast OPT passes.

16.30. Executing ICE40_OPT pass (performing simple optimizations).

16.30.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) alu.$auto$alumacc.cc:485:replace_alu$627.slice[32].carry: CO=1'0

16.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
<suppressed ~44 debug messages>
Optimizing module regfile.
<suppressed ~64 debug messages>
Optimizing module top.

16.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
<suppressed ~15 debug messages>
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 5 cells.

16.30.4. Executing OPT_DFF pass (perform DFF optimizations).

16.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~3 debug messages>

16.30.6. Rerunning OPT passes. (Removed registers in this run.)

16.30.7. Running ICE40 specific optimizations.

16.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.30.10. Executing OPT_DFF pass (perform DFF optimizations).

16.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.30.12. Finished OPT passes. (There is nothing left to do.)

16.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

16.32. Executing TECHMAP pass (map to technology primitives).

16.32.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

16.32.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~2584 debug messages>

16.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping alu.$auto$alumacc.cc:485:replace_alu$627.slice[32].carry ($lut).

16.35. Executing ICE40_OPT pass (performing simple optimizations).

16.35.1. Running ICE40 specific optimizations.

16.35.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
<suppressed ~15 debug messages>
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
<suppressed ~5 debug messages>
Optimizing module dmem.
Optimizing module extend.
<suppressed ~18 debug messages>
Optimizing module imem.
<suppressed ~20 debug messages>
Optimizing module regfile.
Optimizing module top.

16.35.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.35.4. Executing OPT_DFF pass (perform DFF optimizations).

16.35.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12816 unused wires.
<suppressed ~5 debug messages>

16.35.6. Rerunning OPT passes. (Removed registers in this run.)

16.35.7. Running ICE40 specific optimizations.

16.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
Optimizing module arm.
Optimizing module condcheck.
Optimizing module condlogic.
Optimizing module controller.
Optimizing module datapath.
Optimizing module decoder.
Optimizing module dmem.
Optimizing module extend.
Optimizing module imem.
Optimizing module regfile.
Optimizing module top.

16.35.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\arm'.
Finding identical cells in module `\condcheck'.
Finding identical cells in module `\condlogic'.
Finding identical cells in module `\controller'.
Finding identical cells in module `\datapath'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\dmem'.
Finding identical cells in module `\extend'.
Finding identical cells in module `\imem'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

16.35.10. Executing OPT_DFF pass (perform DFF optimizations).

16.35.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \arm..
Finding unused cells or wires in module \condcheck..
Finding unused cells or wires in module \condlogic..
Finding unused cells or wires in module \controller..
Finding unused cells or wires in module \datapath..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \dmem..
Finding unused cells or wires in module \extend..
Finding unused cells or wires in module \imem..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \top..

16.35.12. Finished OPT passes. (There is nothing left to do.)

16.36. Executing TECHMAP pass (map to technology primitives).

16.36.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

16.36.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

16.37. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

16.38. Executing ABC9 pass.

16.38.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.3. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Found 0 SCCs in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Found 0 SCCs in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Found 0 SCCs in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Found 0 SCCs in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000.
Found 0 SCCs in module alu.
Found 0 SCCs in module arm.
Found 0 SCCs in module condcheck.
Found 0 SCCs in module condlogic.
Found 0 SCCs in module controller.
Found 0 SCCs in module datapath.
Found 0 SCCs in module decoder.
Found 0 SCCs in module dmem.
Found 0 SCCs in module extend.
Found 0 SCCs in module imem.
Found 0 SCCs in module regfile.
Found 0 SCCs in module top.
Found 0 SCCs.

16.38.4. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.5. Executing PROC pass (convert processes to netlists).

16.38.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

16.38.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

16.38.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

16.38.5.4. Executing PROC_INIT pass (extract init attributes).

16.38.5.5. Executing PROC_ARST pass (detect async resets in processes).

16.38.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

16.38.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

16.38.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

16.38.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

16.38.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

16.38.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

16.38.5.12. Executing OPT_EXPR pass (perform const folding).

16.38.6. Executing TECHMAP pass (map to technology primitives).

16.38.6.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

16.38.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~142 debug messages>

16.38.7. Executing OPT pass (performing simple optimizations).

16.38.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SB_DFFER.
Optimizing module SB_DFFR.

16.38.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SB_DFFER'.
Finding identical cells in module `\SB_DFFR'.
Removed a total of 0 cells.

16.38.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SB_DFFER..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SB_DFFR..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.38.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SB_DFFER.
  Optimizing cells in module \SB_DFFR.
Performed a total of 0 changes.

16.38.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SB_DFFER'.
Finding identical cells in module `\SB_DFFR'.
Removed a total of 0 cells.

16.38.7.6. Executing OPT_DFF pass (perform DFF optimizations).

16.38.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SB_DFFER..
Finding unused cells or wires in module \SB_DFFR..

16.38.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SB_DFFER.
Optimizing module SB_DFFR.

16.38.7.9. Finished OPT passes. (There is nothing left to do.)

16.38.8. Executing TECHMAP pass (map to technology primitives).

16.38.8.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

16.38.8.2. Continuing TECHMAP pass.
Using template SB_DFFR for cells of type SB_DFFR.
Using template SB_DFFER for cells of type SB_DFFER.
No more expansions possible.
<suppressed ~38 debug messages>

16.38.9. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_model.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

16.38.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~8 debug messages>

16.38.11. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

16.38.13. Executing TECHMAP pass (map to technology primitives).

16.38.13.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

16.38.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
No more expansions possible.
<suppressed ~172 debug messages>

16.38.14. Executing OPT pass (performing simple optimizations).

16.38.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
<suppressed ~4 debug messages>
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.
<suppressed ~4 debug messages>

16.38.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
<suppressed ~29 debug messages>
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
<suppressed ~29 debug messages>
Removed a total of 24 cells.

16.38.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.38.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
Performed a total of 0 changes.

16.38.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

16.38.14.6. Executing OPT_DFF pass (perform DFF optimizations).

16.38.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 48 unused wires.
<suppressed ~2 debug messages>

16.38.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.

16.38.14.9. Rerunning OPT passes. (Maybe there is more to do..)

16.38.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

16.38.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
  Optimizing cells in module \alu.
Performed a total of 0 changes.

16.38.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000'.
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

16.38.14.13. Executing OPT_DFF pass (perform DFF optimizations).

16.38.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \alu..

16.38.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder\WIDTH=s32'00000000000000000000000000100000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000.
Optimizing module alu.

16.38.14.16. Finished OPT passes. (There is nothing left to do.)

16.38.15. Executing AIGMAP pass (map logic to AIG).
Module $paramod\adder\WIDTH=s32'00000000000000000000000000100000: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_
Module alu: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

16.38.16. Executing AIGMAP pass (map logic to AIG).
Module $paramod\adder\WIDTH=s32'00000000000000000000000000100000: replaced 0 cells with 0 new cells, skipped 32 cells.
  not replaced 1 cell types:
      32 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
Module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010: replaced 0 cells with 0 new cells, skipped 4 cells.
  not replaced 2 cell types:
       2 SB_DFFER
       2 SB_DFFER_$abc9_byp
Module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000: replaced 0 cells with 0 new cells, skipped 64 cells.
  not replaced 2 cell types:
      32 SB_DFFR
      32 SB_DFFR_$abc9_byp
Module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100: replaced 4 cells with 28 new cells, skipped 0 cells.
  replaced 1 cell types:
       4 $_MUX_
Module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000: replaced 32 cells with 224 new cells, skipped 0 cells.
  replaced 1 cell types:
      32 $_MUX_
Module alu: replaced 162 cells with 840 new cells, skipped 165 cells.
  replaced 2 cell types:
      98 $_OR_
      64 $_MUX_
  not replaced 3 cell types:
      37 $_NOT_
      96 $_AND_
      32 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
Module arm: replaced 0 cells with 0 new cells, skipped 2 cells.
  not replaced 2 cell types:
       1 controller
       1 datapath
Module condcheck: replaced 50 cells with 206 new cells, skipped 40 cells.
  replaced 3 cell types:
      48 $_OR_
       1 $_XOR_
       1 $_MUX_
  not replaced 2 cell types:
      25 $_NOT_
      15 $_AND_
Module condlogic: replaced 0 cells with 0 new cells, skipped 8 cells.
  not replaced 3 cell types:
       5 $_AND_
       1 condcheck
       2 $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Module controller: replaced 0 cells with 0 new cells, skipped 2 cells.
  not replaced 2 cell types:
       1 condlogic
       1 decoder
Module datapath: replaced 0 cells with 0 new cells, skipped 11 cells.
  not replaced 7 cell types:
       1 alu
       1 regfile
       1 extend
       3 $paramod\mux2\WIDTH=s32'00000000000000000000000000100000
       2 $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
       2 $paramod\adder\WIDTH=s32'00000000000000000000000000100000
       1 $paramod\flopr\WIDTH=s32'00000000000000000000000000100000
Module decoder: replaced 26 cells with 122 new cells, skipped 28 cells.
  replaced 2 cell types:
      20 $_OR_
       6 $_MUX_
  not replaced 2 cell types:
      19 $_NOT_
       9 $_AND_
Module dmem: replaced 2016 cells with 14112 new cells, skipped 2206 cells.
  replaced 1 cell types:
    2016 $_MUX_
  not replaced 3 cell types:
       6 $_NOT_
     152 $_AND_
    2048 SB_DFFE
Module extend: replaced 21 cells with 108 new cells, skipped 58 cells.
  replaced 2 cell types:
      13 $_OR_
       8 $_MUX_
  not replaced 2 cell types:
       4 $_NOT_
      54 $_AND_
Module imem: replaced 82 cells with 550 new cells, skipped 14 cells.
  replaced 2 cell types:
       8 $_OR_
      74 $_MUX_
  not replaced 2 cell types:
       2 $_NOT_
      12 $_AND_
Module regfile: replaced 966 cells with 6744 new cells, skipped 530 cells.
  replaced 2 cell types:
       6 $_OR_
     960 $_MUX_
  not replaced 3 cell types:
      12 $_NOT_
      38 $_AND_
     480 SB_DFFE
Module top: replaced 0 cells with 0 new cells, skipped 3 cells.
  not replaced 3 cell types:
       1 arm
       1 dmem
       1 imem

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~11 debug messages>
Extracted 0 AND gates and 130 wires from module `$paramod\adder\WIDTH=s32'00000000000000000000000000100000' to a netlist network with 64 inputs and 32 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     64/     32  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 32  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     64/     32  and =       0  lev =    0 (0.00)  mem = 0.01 MB  ch =    0  box = 32  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.04 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 9889.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     64/     32  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 32  bb = 0
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  levB =   32  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~204 debug messages>
Removed 0 unused cells and 321 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:       32
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~13 debug messages>
Extracted 0 AND gates and 11 wires from module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010' to a netlist network with 7 inputs and 2 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      7/      2  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 2  bb = 2
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      7/      2  and =       0  lev =    0 (0.00)  mem = 0.00 MB  ch =    0  box = 2  bb = 2
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.00 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =      7/      2  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 2  bb = 2
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  levB =    1  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~30 debug messages>
Removed 0 unused cells and 15 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:   \SB_DFFER_$abc9_byp cells:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~43 debug messages>
Extracted 0 AND gates and 100 wires from module `$paramod\flopr\WIDTH=s32'00000000000000000000000000100000' to a netlist network with 66 inputs and 32 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     66/     32  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 32  bb = 32
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     66/     32  and =       0  lev =    0 (0.00)  mem = 0.00 MB  ch =    0  box = 32  bb = 32
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.03 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del = 1589.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     66/     32  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 32  bb = 32
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  levB =    1  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~208 debug messages>
Removed 0 unused cells and 194 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:   \SB_DFFR_$abc9_byp cells:       32
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 12 AND gates and 39 wires from module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100' to a netlist network with 9 inputs and 4 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      9/      4  and =      12  lev =    2 (2.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      9/      4  and =      24  lev =    2 (2.00)  mem = 0.00 MB  ch =    4  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =      24.  Ch =     4.  Total mem =    0.01 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: P:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: P:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: F:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: A:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: A:  Del = 1982.00.  Ar =       4.0.  Edge =       12.  Cut =       48.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =      9/      4  and =      12  lev =    2 (2.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=3)  :  lut =      4  edge =      12  lev =    1 (1.00)  mem = 0.00 MB
ABC: LUT = 4 : 2=0 0.0 %  3=4 100.0 %  Ave = 3.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~34 debug messages>
Removed 17 unused cells and 30 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:        4
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 96 AND gates and 291 wires from module `$paramod\mux2\WIDTH=s32'00000000000000000000000000100000' to a netlist network with 65 inputs and 32 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     65/     32  and =      96  lev =    2 (2.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     65/     32  and =     192  lev =    2 (2.00)  mem = 0.00 MB  ch =   32  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =     192.  Ch =    32.  Total mem =    0.04 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: P:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: P:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: F:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: A:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: A:  Del = 1982.00.  Ar =      32.0.  Edge =       96.  Cut =      384.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     65/     32  and =      96  lev =    2 (2.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=3)  :  lut =     32  edge =      96  lev =    1 (1.00)  mem = 0.00 MB
ABC: LUT = 32 : 2=0 0.0 %  3=32 100.0 %  Ave = 3.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~202 debug messages>
Removed 129 unused cells and 226 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       32
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~11 debug messages>
Extracted 386 AND gates and 1109 wires from module `alu' to a netlist network with 66 inputs and 36 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     66/     36  and =     386  lev =   10 (1.27)  mem = 0.01 MB  box = 32  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     66/     36  and =     701  lev =   24 (1.09)  mem = 0.01 MB  ch =   75  box = 32  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =     701.  Ch =    73.  Total mem =    0.14 MB. Peak cut mem =    0.02 MB.
ABC: P:  Del = 16703.00.  Ar =     108.0.  Edge =      335.  Cut =     3213.  T =     0.00 sec
ABC: P:  Del = 16703.00.  Ar =     107.0.  Edge =      332.  Cut =     3002.  T =     0.00 sec
ABC: P:  Del = 16703.00.  Ar =     109.0.  Edge =      332.  Cut =     3139.  T =     0.00 sec
ABC: F:  Del = 16703.00.  Ar =     108.0.  Edge =      331.  Cut =     2860.  T =     0.00 sec
ABC: A:  Del = 16703.00.  Ar =     107.0.  Edge =      330.  Cut =     2673.  T =     0.00 sec
ABC: A:  Del = 16703.00.  Ar =     107.0.  Edge =      330.  Cut =     2866.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: The network is not changed by "&mfs".
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     66/     36  and =     383  lev =   13 (1.30)  mem = 0.01 MB  box = 32  bb = 0
ABC: Mapping (K=4)  :  lut =    107  edge =     330  lev =    6 (0.56)  levB =   36  mem = 0.00 MB
ABC: LUT = 107 : 2=33 30.8 %  3=32 29.9 %  4=42 39.3 %  Ave = 3.08
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.03 seconds, total: 0.03 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~216 debug messages>
Removed 630 unused cells and 955 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:      107
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:       32
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 0 AND gates and 179 wires from module `arm' to a netlist network with 177 inputs and 111 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    177/    111  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    177/    111  and =       0  lev =    0 (0.00)  mem = 0.01 MB  ch =    0  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.04 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    177/    111  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~584 debug messages>
Removed 0 unused cells and 288 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:       12
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 69 AND gates and 256 wires from module `condcheck' to a netlist network with 8 inputs and 1 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      8/      1  and =      69  lev =   10 (10.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =      8/      1  and =      83  lev =    8 (8.00)  mem = 0.00 MB  ch =    8  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =      83.  Ch =     6.  Total mem =    0.01 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      447.  T =     0.00 sec
ABC: P:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      429.  T =     0.00 sec
ABC: P:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      422.  T =     0.00 sec
ABC: F:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      345.  T =     0.00 sec
ABC: A:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      346.  T =     0.00 sec
ABC: A:  Del = 7238.00.  Ar =      22.0.  Edge =       75.  Cut =      346.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =      8/      1  and =      75  lev =    8 (8.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =     22  edge =      75  lev =    4 (4.00)  mem = 0.00 MB
ABC: LUT = 22 : 2=6 27.3 %  3=1 4.5 %  4=15 68.2 %  Ave = 3.41
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~26 debug messages>
Removed 100 unused cells and 109 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       22
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 5 AND gates and 27 wires from module `condlogic' to a netlist network with 20 inputs and 9 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     20/      9  and =       5  lev =    1 (0.56)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     20/      9  and =       5  lev =    1 (0.56)  mem = 0.00 MB  ch =    0  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       5.  Ch =     0.  Total mem =    0.00 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: P:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: P:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: F:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: A:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: A:  Del = 1955.00.  Ar =       5.0.  Edge =       10.  Cut =        5.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     20/      9  and =       5  lev =    1 (0.56)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=2)  :  lut =      5  edge =      10  lev =    1 (0.56)  mem = 0.00 MB
ABC: LUT = 5 : 2=5 100.0 %  Ave = 2.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~66 debug messages>
Removed 0 unused cells and 29 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:        5
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        5
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 0 AND gates and 44 wires from module `controller' to a netlist network with 42 inputs and 16 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     42/     16  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     42/     16  and =       0  lev =    0 (0.00)  mem = 0.00 MB  ch =    0  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.01 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     42/     16  and =       0  lev =    0 (0.00)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~124 debug messages>
Removed 0 unused cells and 58 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:       12
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 0 AND gates and 410 wires from module `datapath' to a netlist network with 408 inputs and 332 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    408/    332  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    408/    332  and =       0  lev =    0 (0.00)  mem = 0.01 MB  ch =    0  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.10 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    408/    332  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~1488 debug messages>
Removed 0 unused cells and 740 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       13
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 47 AND gates and 172 wires from module `decoder' to a netlist network with 12 inputs and 13 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     12/     13  and =      37  lev =    9 (4.31)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     12/     13  and =      29  lev =    4 (2.54)  mem = 0.00 MB  ch =    2  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =      29.  Ch =     2.  Total mem =    0.01 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 3659.00.  Ar =      13.0.  Edge =       42.  Cut =      122.  T =     0.00 sec
ABC: P:  Del = 3659.00.  Ar =      13.0.  Edge =       42.  Cut =      122.  T =     0.00 sec
ABC: P:  Del = 3659.00.  Ar =      13.0.  Edge =       42.  Cut =      126.  T =     0.00 sec
ABC: F:  Del = 3659.00.  Ar =      13.0.  Edge =       42.  Cut =      100.  T =     0.00 sec
ABC: A:  Del = 3659.00.  Ar =      13.0.  Edge =       41.  Cut =      100.  T =     0.00 sec
ABC: A:  Del = 3659.00.  Ar =      13.0.  Edge =       41.  Cut =      100.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     12/     13  and =      48  lev =    4 (2.54)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =     13  edge =      41  lev =    2 (1.46)  mem = 0.00 MB
ABC: LUT = 13 : 2=3 23.1 %  3=5 38.5 %  4=5 38.5 %  Ave = 3.15
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~58 debug messages>
Removed 65 unused cells and 87 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       13
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        9
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~2053 debug messages>
Extracted 6200 AND gates and 16386 wires from module `dmem' to a netlist network with 2114 inputs and 96 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =   2114/     96  and =    6200  lev =   12 (6.67)  mem = 0.11 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =   2114/     96  and =    7176  lev =   10 (6.00)  mem = 0.12 MB  ch =  583  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    7176.  Ch =   295.  Total mem =    1.29 MB. Peak cut mem =    0.02 MB.
ABC: P:  Del = 9882.00.  Ar =    1527.0.  Edge =     6092.  Cut =    43373.  T =     0.00 sec
ABC: P:  Del = 9882.00.  Ar =    1527.0.  Edge =     6092.  Cut =    42861.  T =     0.00 sec
ABC: P:  Del = 9882.00.  Ar =    1522.0.  Edge =     6004.  Cut =    42861.  T =     0.00 sec
ABC: F:  Del = 9882.00.  Ar =    1522.0.  Edge =     6004.  Cut =    25302.  T =     0.00 sec
ABC: A:  Del = 9882.00.  Ar =    1522.0.  Edge =     6004.  Cut =    25302.  T =     0.00 sec
ABC: A:  Del = 9882.00.  Ar =    1522.0.  Edge =     6004.  Cut =    25302.  T =     0.00 sec
ABC: Total time =     0.02 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =   2114/     96  and =    4674  lev =   10 (6.00)  mem = 0.09 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =   1522  edge =    6004  lev =    5 (3.00)  mem = 0.06 MB
ABC: LUT = 1522 : 2=2 0.1 %  3=80 5.3 %  4=1440 94.6 %  Ave = 3.94
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.16 seconds, total: 0.16 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~4429 debug messages>
Removed 5718 unused cells and 7928 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:     1522
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       65
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 91 AND gates and 200 wires from module `extend' to a netlist network with 26 inputs and 32 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     26/     32  and =      91  lev =    5 (3.56)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     26/     32  and =      66  lev =    3 (2.31)  mem = 0.00 MB  ch =    6  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =      66.  Ch =     6.  Total mem =    0.02 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: P:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: P:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: F:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: A:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: A:  Del = 2035.00.  Ar =      26.0.  Edge =       88.  Cut =      210.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     26/     32  and =      76  lev =    3 (2.31)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =     26  edge =      88  lev =    1 (1.00)  mem = 0.00 MB
ABC: LUT = 26 : 2=0 0.0 %  3=16 61.5 %  4=10 38.5 %  Ave = 3.38
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~124 debug messages>
Removed 80 unused cells and 132 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       26
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 242 AND gates and 606 wires from module `imem' to a netlist network with 32 inputs and 32 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     32/     32  and =     157  lev =    8 (5.09)  mem = 0.00 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =     32/     32  and =     167  lev =    7 (3.84)  mem = 0.00 MB  ch =   26  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =     167.  Ch =    24.  Total mem =    0.03 MB. Peak cut mem =    0.02 MB.
ABC: P:  Del = 5203.00.  Ar =      64.0.  Edge =      229.  Cut =      986.  T =     0.00 sec
ABC: P:  Del = 5203.00.  Ar =      64.0.  Edge =      230.  Cut =      941.  T =     0.00 sec
ABC: P:  Del = 5203.00.  Ar =      63.0.  Edge =      224.  Cut =      952.  T =     0.00 sec
ABC: F:  Del = 5203.00.  Ar =      60.0.  Edge =      213.  Cut =      650.  T =     0.00 sec
ABC: A:  Del = 5203.00.  Ar =      60.0.  Edge =      208.  Cut =      686.  T =     0.00 sec
ABC: A:  Del = 5203.00.  Ar =      60.0.  Edge =      208.  Cut =      696.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =     32/     32  and =     220  lev =    7 (3.94)  mem = 0.00 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =     60  edge =     208  lev =    3 (1.88)  mem = 0.00 MB
ABC: LUT = 60 : 2=9 15.0 %  3=14 23.3 %  4=37 61.7 %  Ave = 3.47
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.01 seconds, total: 0.01 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~136 debug messages>
Removed 297 unused cells and 354 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:       60
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~485 debug messages>
Extracted 2924 AND gates and 7354 wires from module `regfile' to a netlist network with 558 inputs and 79 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    558/     79  and =    2924  lev =   10 (8.67)  mem = 0.04 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    558/     79  and =    5801  lev =    9 (7.86)  mem = 0.08 MB  ch =  735  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    5801.  Ch =   642.  Total mem =    0.88 MB. Peak cut mem =    0.01 MB.
ABC: P:  Del = 8245.00.  Ar =    1112.0.  Edge =     3921.  Cut =    24374.  T =     0.00 sec
ABC: P:  Del = 8245.00.  Ar =    1049.0.  Edge =     3732.  Cut =    23563.  T =     0.00 sec
ABC: P:  Del = 8245.00.  Ar =     987.0.  Edge =     3407.  Cut =    24910.  T =     0.00 sec
ABC: F:  Del = 8245.00.  Ar =     985.0.  Edge =     3401.  Cut =    20525.  T =     0.00 sec
ABC: A:  Del = 8245.00.  Ar =     985.0.  Edge =     3358.  Cut =    19797.  T =     0.00 sec
ABC: A:  Del = 8245.00.  Ar =     985.0.  Edge =     3358.  Cut =    19728.  T =     0.00 sec
ABC: Total time =     0.01 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    558/     79  and =    2821  lev =    9 (7.86)  mem = 0.04 MB  box = 0  bb = 0
ABC: Mapping (K=4)  :  lut =    985  edge =    3358  lev =    4 (3.62)  mem = 0.03 MB
ABC: LUT = 985 : 2=109 11.1 %  3=364 37.0 %  4=512 52.0 %  Ave = 3.41
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.11 seconds, total: 0.11 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~1283 debug messages>
Removed 4501 unused cells and 5138 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:      985
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       17
Removing temp directory.

16.38.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

16.38.16.3. Executing XAIGER backend.
<suppressed ~5 debug messages>
Extracted 0 AND gates and 261 wires from module `top' to a netlist network with 163 inputs and 257 outputs.

16.38.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

16.38.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    163/    257  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    163/    257  and =       0  lev =    0 (0.00)  mem = 0.01 MB  ch =    0  box = 0  bb = 0
ABC: + &if -W 750 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =       0.  Ch =     0.  Total mem =    0.06 MB. Peak cut mem =    0.00 MB.
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: P:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: F:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: A:  Del =    0.00.  Ar =       0.0.  Edge =        0.  Cut =        0.  T =     0.00 sec
ABC: Total time =     0.00 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: Timing manager is given but there is no GIA of boxes.
ABC: Error: Abc_FrameUpdateGia(): Tranformation has failed.
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    163/    257  and =       0  lev =    0 (0.00)  mem = 0.01 MB  box = 0  bb = 0
ABC: Mapping (K=0)  :  lut =      0  edge =       0  lev =    0 (0.00)  mem = 0.00 MB
ABC: LUT = 0 : Ave = 0.00
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.00 seconds, total: 0.00 seconds

16.38.16.6. Executing AIGER frontend.
<suppressed ~848 debug messages>
Removed 0 unused cells and 324 unused wires.

16.38.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        9
Removing temp directory.

16.38.17. Executing TECHMAP pass (map to technology primitives).

16.38.17.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

16.38.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template SB_DFFR_$abc9_byp for cells of type SB_DFFR_$abc9_byp.
Using template SB_DFFER_$abc9_byp for cells of type SB_DFFER_$abc9_byp.
No more expansions possible.
<suppressed ~106 debug messages>

16.39. Executing ICE40_WRAPCARRY pass (wrap carries).

16.40. Executing TECHMAP pass (map to technology primitives).

16.40.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

16.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 150 unused cells and 28701 unused wires.

16.41. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        4
  3-LUT                4
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        4
  3-LUT                4
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        4
  3-LUT                4
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:      139
  2-LUT               33
  3-LUT               64
  4-LUT               42
  with \SB_CARRY    (#0)   32
  with \SB_CARRY    (#1)   31

Eliminating LUTs.
Number of LUTs:      139
  2-LUT               33
  3-LUT               64
  4-LUT               42
  with \SB_CARRY    (#0)   32
  with \SB_CARRY    (#1)   31

Combining LUTs.
Number of LUTs:      139
  2-LUT               33
  3-LUT               64
  4-LUT               42
  with \SB_CARRY    (#0)   32
  with \SB_CARRY    (#1)   31
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       22
  2-LUT                6
  3-LUT                1
  4-LUT               15
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       22
  2-LUT                6
  3-LUT                1
  4-LUT               15
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       22
  2-LUT                6
  3-LUT                1
  4-LUT               15
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        5
  2-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        5
  2-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        5
  2-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       13
  2-LUT                3
  3-LUT                5
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       13
  2-LUT                3
  3-LUT                5
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       13
  2-LUT                3
  3-LUT                5
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:     1522
  2-LUT                2
  3-LUT               80
  4-LUT             1440
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:     1522
  2-LUT                2
  3-LUT               80
  4-LUT             1440
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:     1522
  2-LUT                2
  3-LUT               80
  4-LUT             1440
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       26
  3-LUT               16
  4-LUT               10
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       26
  3-LUT               16
  4-LUT               10
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       26
  3-LUT               16
  4-LUT               10
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       60
  2-LUT                9
  3-LUT               14
  4-LUT               37
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       60
  2-LUT                9
  3-LUT               14
  4-LUT               37
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       60
  2-LUT                9
  3-LUT               14
  4-LUT               37
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:      985
  2-LUT              109
  3-LUT              364
  4-LUT              512
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:      985
  2-LUT              109
  3-LUT              364
  4-LUT              512
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:      985
  2-LUT              109
  3-LUT              364
  4-LUT              512
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~22839 debug messages>

16.42. Executing TECHMAP pass (map to technology primitives).

16.42.1. Executing Verilog-2005 frontend: /Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/Users/nick/.bin/oss-cad-suite/libexec/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

16.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0010 for cells of type $lut.
Using template $paramod$c7754eeb17b54dfe53ea4a973db3714d78ced2f9\$lut for cells of type $lut.
Using template $paramod$58df2c605746858c7e53492c8f57d6f1fafa12d2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010100 for cells of type $lut.
Using template $paramod$18455d4fd1270af2266bf4bb1c44971b2eb6b37a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$b28b4ecbaa07efdcc51c93348ccdc2395f8b41c1\$lut for cells of type $lut.
Using template $paramod$efc60783c939ae41b2f3555af407b17c007b27f8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011000 for cells of type $lut.
Using template $paramod$e2d96f36ef28053ecd27167cd95b944485ac3146\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$e5758a88c2c156ccb3037f71a73d1b15af5b310d\$lut for cells of type $lut.
Using template $paramod$c8f16510db975553c8b0be1064e8f5234175f8a8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100100 for cells of type $lut.
Using template $paramod$4b9b235bc4444ff899bef0c648e4109b26737f1a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100111 for cells of type $lut.
Using template $paramod$75d5c453cca75cc7a7ca320c4fb7be0932b6aaa7\$lut for cells of type $lut.
Using template $paramod$0ee0167fb5dd83bdfe7197fff23e2c7146c57037\$lut for cells of type $lut.
Using template $paramod$b9305c669fd883d24574655b402c7ff9f28efb1a\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011011 for cells of type $lut.
Using template $paramod$16894c241be5ea1f024e9339dea788b4dbe184ae\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101000 for cells of type $lut.
Using template $paramod$79364b9974cfc81fb54c164d10340bf9c7bccd7f\$lut for cells of type $lut.
Using template $paramod$3702268f692b8bf258e428f65d3bca4e1f76d98b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100000 for cells of type $lut.
Using template $paramod$305fd3b7552c2378a7cd8315d4f432697caa28ea\$lut for cells of type $lut.
Using template $paramod$f06fe28b0670f5b9b7f31173cbc15ea05ea551d4\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$2d9afc4fcdaefc1aa926013768e4628d50e32e31\$lut for cells of type $lut.
Using template $paramod$47a8214374025465e226fa66bee690ff33268a25\$lut for cells of type $lut.
Using template $paramod$722bfd9af0ae56ca9d1d12a221cb5ede16461f26\$lut for cells of type $lut.
Using template $paramod$675dc53d096136662ceaee368c3a62f60374c538\$lut for cells of type $lut.
Using template $paramod$25ce03f90631e67c5e443b0900c3d90fee95a96b\$lut for cells of type $lut.
Using template $paramod$873c7bc7320f127ef58f5ab3b6a9a0987cdc3e47\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$0e36d771a172cfb1acdbb7ed418d288430d54908\$lut for cells of type $lut.
Using template $paramod$1c4dba04c7b1b6f9ae2fbd2ebcdbd37f5c14a3e3\$lut for cells of type $lut.
Using template $paramod$6230360d3448cb863f2f259c28a1234ced7c698b\$lut for cells of type $lut.
Using template $paramod$3caf9fc6fa8723cca1d2568acbb6ab111af0f5f5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110010 for cells of type $lut.
Using template $paramod$a33f77522e8e87da5003659fca4985ab5c5a1b84\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110001 for cells of type $lut.
Using template $paramod$834b69b4f3e9d125b3859ab79039deeeb30433b6\$lut for cells of type $lut.
Using template $paramod$eaea85d27cc0950ed001348e061727a194f5cf9c\$lut for cells of type $lut.
Using template $paramod$2655bcf1dbf1eb590d777d2c8525425635467e32\$lut for cells of type $lut.
Using template $paramod$2902eb8ec3ca272968b5d8a7010e48f85069ed0f\$lut for cells of type $lut.
Using template $paramod$148f221bbe7b352e7af6eb9c1a77ec0431413ab9\$lut for cells of type $lut.
Using template $paramod$fb5496753f4cd235e71c284b2ffee9d41a960ca2\$lut for cells of type $lut.
Using template $paramod$5a9dfdcb08c980fdbd2cd1615cc0d721ce156158\$lut for cells of type $lut.
Using template $paramod$8d34633a393a9c1b764705ff3781c5dc576977fe\$lut for cells of type $lut.
Using template $paramod$d585d87427a89882419e9638cb8f2f761f2b5345\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11011100 for cells of type $lut.
Using template $paramod$d4fae2c0d9ad2966369cd4e39b81c71bcd1327c9\$lut for cells of type $lut.
Using template $paramod$a5516fc31d1e552de2435200bb732b4d4ad63a9c\$lut for cells of type $lut.
Using template $paramod$81df3b5b0c68f16cd64a76012a4213a1b5a86efa\$lut for cells of type $lut.
Using template $paramod$1a688f5e16f72f97a58d830969334f3556a072de\$lut for cells of type $lut.
Using template $paramod$5bcf213545ceb6e5402f1cba529c501cefaf8231\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110111 for cells of type $lut.
Using template $paramod$35747c4193cc59c2095f0a415365bd2a443730a2\$lut for cells of type $lut.
Using template $paramod$907f2d2c02ff149f00785eb99b3e2aa8a6a3fccd\$lut for cells of type $lut.
Using template $paramod$ad817709bf476d4524407b6b9307fd1d117a96a8\$lut for cells of type $lut.
Using template $paramod$b6996725d9b9718a150afef3149685bc68462426\$lut for cells of type $lut.
Using template $paramod$94ac66a11090dca84889e55fcf03297912a5b7ec\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000010 for cells of type $lut.
Using template $paramod$d5c7dda3e544463bf43ed73dadb51262f5dcf2fe\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000101 for cells of type $lut.
Using template $paramod$f8cfabbbb5c5103edc1fa82a87b629b56aba5eb7\$lut for cells of type $lut.
Using template $paramod$40e5a5bffee68d424d8b966d83c16c547cdeb8ab\$lut for cells of type $lut.
Using template $paramod$ed53936884d8f0c77515f02c43ecf1f4f086a1bf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$f8f63b209b7230e81958663ff24fef1613156af7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001000 for cells of type $lut.
Using template $paramod$873c285bdccf0ac2b60d2304ea5cd14bf211d2a6\$lut for cells of type $lut.
Using template $paramod$cad45b6c9da81941161a13849773fe2ed4bc1c6f\$lut for cells of type $lut.
Using template $paramod$fca001e3e0b52158a872e76e56c01ec10dfbb1de\$lut for cells of type $lut.
Using template $paramod$00e22b797b0237a00ad64fac17d87fc61d61b8d5\$lut for cells of type $lut.
Using template $paramod$7ad33c776f7927014a3c72f1a75c59359054c3fb\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$ba7c22fadfbf9ee7abcb895a21403114111dd201\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111110 for cells of type $lut.
Using template $paramod$4cf5935e1ab688c7b29c7c684a98523c4a440066\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100011 for cells of type $lut.
Using template $paramod$84954618eb9fde76ec37ab04fd2c5afa124986a3\$lut for cells of type $lut.
Using template $paramod$2b29ccbd5fb8b9c557f92ddec1023c75686f32ae\$lut for cells of type $lut.
Using template $paramod$19e5b38cca183d8b6b3a15d20dc995c09cd71893\$lut for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod$eb3d85023a8c03ed866055b7b6ffb27450652855\$lut for cells of type $lut.
Using template $paramod$32abbd1d449a67fb913b4733374e345d4c17175b\$lut for cells of type $lut.
Using template $paramod$01c608da0c772a10858492e8ba4f65bc04f42266\$lut for cells of type $lut.
Using template $paramod$bf60f6ec407ee294958b6566514fc3125ec42258\$lut for cells of type $lut.
Using template $paramod$096a408fd37568b92eea484c5cc9a8e86ab67a87\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$2ff1ef2fa67138cf71814804285c211c9e377fda\$lut for cells of type $lut.
Using template $paramod$e51a8a571bee774247b38f52d6e85fd62ae52cea\$lut for cells of type $lut.
Using template $paramod$dcba541ad53a9873d71bfba6c13dc2a8e2a60a79\$lut for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod$5e9374f44a27c3f8a1c38af244ec43ceb4fb8d4f\$lut for cells of type $lut.
Using template $paramod$3ccd4e460eeb40194aa88ef0e5239278bde42035\$lut for cells of type $lut.
Using template $paramod$1843b3c15f2447d117e2d5de9b00f791ef5f9fa3\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$dcfc23e7d6bcd26b82233688fdfbe92480ddfdcf\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~4377 debug messages>
Removed 0 unused cells and 7303 unused wires.

16.43. Executing AUTONAME pass.
Renamed 156 objects in module $paramod\adder\WIDTH=s32'00000000000000000000000000100000 (4 iterations).
Renamed 2 objects in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010 (2 iterations).
Renamed 32 objects in module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000 (2 iterations).
Renamed 4 objects in module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100 (2 iterations).
Renamed 32 objects in module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000 (2 iterations).
Renamed 811 objects in module alu (9 iterations).
Renamed 191 objects in module condcheck (15 iterations).
Renamed 5 objects in module condlogic (2 iterations).
Renamed 21 objects in module decoder (4 iterations).
Renamed 11356 objects in module dmem (16 iterations).
Renamed 26 objects in module extend (2 iterations).
Renamed 224 objects in module imem (10 iterations).
Renamed 5719 objects in module regfile (13 iterations).
<suppressed ~6481 debug messages>

16.44. Executing HIERARCHY pass (managing design hierarchy).

16.44.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \arm
Used module:         \controller
Used module:             \condlogic
Used module:                 \condcheck
Used module:                 $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:             \decoder
Used module:         \datapath
Used module:             \alu
Used module:             \extend
Used module:             $paramod\adder\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\flopr\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:             \regfile
Used module:     \dmem
Used module:     \imem

16.44.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \arm
Used module:         \controller
Used module:             \condlogic
Used module:                 \condcheck
Used module:                 $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:             \decoder
Used module:         \datapath
Used module:             \alu
Used module:             \extend
Used module:             $paramod\adder\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\flopr\WIDTH=s32'00000000000000000000000000100000
Used module:             $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:             \regfile
Used module:     \dmem
Used module:     \imem
Removed 0 unused modules.

16.45. Printing statistics.

=== $paramod\adder\WIDTH=s32'00000000000000000000000000100000 ===

   Number of wires:                 34
   Number of wire bits:            127
   Number of public wires:          34
   Number of public wire bits:     127
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     SB_CARRY                       31
     SB_LUT4                        32

=== $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010 ===

   Number of wires:                  5
   Number of wire bits:              7
   Number of public wires:           5
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     SB_DFFER                        2

=== $paramod\flopr\WIDTH=s32'00000000000000000000000000100000 ===

   Number of wires:                  4
   Number of wire bits:             66
   Number of public wires:           4
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_DFFR                        32

=== $paramod\mux2\WIDTH=s32'00000000000000000000000000000100 ===

   Number of wires:                  4
   Number of wire bits:             13
   Number of public wires:           4
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== $paramod\mux2\WIDTH=s32'00000000000000000000000000100000 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== alu ===

   Number of wires:                107
   Number of wire bits:            374
   Number of public wires:         107
   Number of public wire bits:     374
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                171
     SB_CARRY                       32
     SB_LUT4                       139

=== arm ===

   Number of wires:                 16
   Number of wire bits:            177
   Number of public wires:          16
   Number of public wire bits:     177
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     controller                      1
     datapath                        1

=== condcheck ===

   Number of wires:                 16
   Number of wire bits:             46
   Number of public wires:          16
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     SB_LUT4                        22

=== condlogic ===

   Number of wires:                 14
   Number of wire bits:             25
   Number of public wires:          14
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010      2
     SB_LUT4                         5
     condcheck                       1

=== controller ===

   Number of wires:                 16
   Number of wire bits:             42
   Number of public wires:          16
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     condlogic                       1
     decoder                         1

=== datapath ===

   Number of wires:                 24
   Number of wire bits:            408
   Number of public wires:          24
   Number of public wire bits:     408
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $paramod\adder\WIDTH=s32'00000000000000000000000000100000      2
     $paramod\flopr\WIDTH=s32'00000000000000000000000000100000      1
     $paramod\mux2\WIDTH=s32'00000000000000000000000000000100      2
     $paramod\mux2\WIDTH=s32'00000000000000000000000000100000      3
     alu                             1
     extend                          1
     regfile                         1

=== decoder ===

   Number of wires:                 17
   Number of wire bits:             46
   Number of public wires:          17
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     SB_LUT4                        13

=== dmem ===

   Number of wires:                556
   Number of wire bits:           3902
   Number of public wires:         556
   Number of public wire bits:    3902
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3570
     SB_DFFE                      2048
     SB_LUT4                      1522

=== extend ===

   Number of wires:                  3
   Number of wire bits:             58
   Number of public wires:           3
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     SB_LUT4                        26

=== imem ===

   Number of wires:                 23
   Number of wire bits:            139
   Number of public wires:          23
   Number of public wire bits:     139
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     SB_LUT4                        60

=== regfile ===

   Number of wires:                390
   Number of wire bits:           1949
   Number of public wires:         390
   Number of public wire bits:    1949
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1465
     SB_DFFE                       480
     SB_LUT4                       985

=== top ===

   Number of wires:                 11
   Number of wire bits:            259
   Number of public wires:          11
   Number of public wire bits:     259
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     arm                             1
     dmem                            1
     imem                            1

=== design hierarchy ===

   top                               1
     arm                             1
       controller                    1
         condlogic                   1
           $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010      2
           condcheck                 1
         decoder                     1
       datapath                      1
         $paramod\adder\WIDTH=s32'00000000000000000000000000100000      2
         $paramod\flopr\WIDTH=s32'00000000000000000000000000100000      1
         $paramod\mux2\WIDTH=s32'00000000000000000000000000000100      2
         $paramod\mux2\WIDTH=s32'00000000000000000000000000100000      3
         alu                         1
         extend                      1
         regfile                     1
     dmem                            1
     imem                            1

   Number of wires:               1295
   Number of wire bits:           8076
   Number of public wires:        1295
   Number of public wire bits:    8076
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5598
     SB_CARRY                       94
     SB_DFFE                      2528
     SB_DFFER                        4
     SB_DFFR                        32
     SB_LUT4                      2940

16.46. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\adder\WIDTH=s32'00000000000000000000000000100000...
Checking module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\flopr\WIDTH=s32'00000000000000000000000000100000...
Checking module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100...
Checking module $paramod\mux2\WIDTH=s32'00000000000000000000000000100000...
Checking module alu...
Checking module arm...
Checking module condcheck...
Checking module condlogic...
Checking module controller...
Checking module datapath...
Checking module decoder...
Checking module dmem...
Checking module extend...
Checking module imem...
Checking module regfile...
Checking module top...
Found and reported 0 problems.

End of script. Logfile hash: e229e1e5dd, CPU: user 2.55s system 0.04s
Yosys 0.19+36 (git sha1 30a4218f5, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 25% 17x abc9_exe (0 sec), 11% 35x read_verilog (0 sec), ...
