
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module arm_single_cycle(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// EEPROM //////////
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
logic [31:0] PC, Instr, ReadData, WriteData;

logic MemWrite, clk;
logic reset_ff0, reset_ff1, reset;



//=======================================================
//  Structural coding
//=======================================================

always_comb 	clk = CLOCK_50;
logic					clk_en;
logic [18:0]  slow_clk;

always_ff @(posedge clk) begin
	reset     <= ~reset_ff1;
	reset_ff1 <= reset_ff0;
	reset_ff0 <= KEY[0];
end
	
always_ff @(posedge clk) begin
	if (reset) begin
		clk_en <= 1'b0;
		slow_clk <= '0;
	end else begin
		slow_clk <= slow_clk + 1'b1;
		if (slow_clk == '0) begin
			clk_en <= 1'b1;
		end else begin
			clk_en <= 1'b0;
		end
	end
end

always_ff @(posedge clk) 
	if (MemWrite) begin
		LED <= {WriteData[7], WriteData[6], WriteData[5], WriteData[4], WriteData[3], WriteData[2], WriteData[1], WriteData[0]};
	end

arm  arm(clk_en, reset, PC, Instr, MemWrite, DataAdr, WriteData, ReadData);
imem imem(PC, Instr);
dmem dmem(clk_en, MemWrite, DataAdr, WriteData, ReadData);


endmodule
